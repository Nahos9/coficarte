{"code":"(()=>{\n\"use strict\";var buffer=require(\"buffer\");var Buffer=buffer.Buffer;var safer={};var key;for(key in buffer){if(!buffer.hasOwnProperty(key))continue;if(key===\"SlowBuffer\"||key===\"Buffer\")continue;safer[key]=buffer[key]}var Safer=safer.Buffer={};for(key in Buffer){if(!Buffer.hasOwnProperty(key))continue;if(key===\"allocUnsafe\"||key===\"allocUnsafeSlow\")continue;Safer[key]=Buffer[key]}safer.Buffer.prototype=Buffer.prototype;if(!Safer.from||Safer.from===Uint8Array.from){Safer.from=function(value,encodingOrOffset,length){if(typeof value===\"number\"){throw new TypeError('The \"value\" argument must not be of type number. Received type '+typeof value)}if(value&&typeof value.length===\"undefined\"){throw new TypeError(\"The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type \"+typeof value)}return Buffer(value,encodingOrOffset,length)}}if(!Safer.alloc){Safer.alloc=function(size,fill,encoding){if(typeof size!==\"number\"){throw new TypeError('The \"size\" argument must be of type number. Received type '+typeof size)}if(size<0||size>=2*(1<<30)){throw new RangeError('The value \"'+size+'\" is invalid for option \"size\"')}var buf=Buffer(size);if(!fill||fill.length===0){buf.fill(0)}else if(typeof encoding===\"string\"){buf.fill(fill,encoding)}else{buf.fill(fill)}return buf}}if(!safer.kStringMaxLength){try{safer.kStringMaxLength=process.binding(\"buffer\").kStringMaxLength}catch(e){}}if(!safer.constants){safer.constants={MAX_LENGTH:safer.kMaxLength};if(safer.kStringMaxLength){safer.constants.MAX_STRING_LENGTH=safer.kStringMaxLength}}module.exports=safer;\n})()\n","warnings":[],"map":{"version":3,"mappings":";aAIA,IAAI,OAAS,QAAQ,QAAQ,EAC7B,IAAI,OAAS,OAAO,OAEpB,IAAI,MAAQ,CAAC,EAEb,IAAI,IAEJ,IAAK,OAAO,OAAQ,CAClB,GAAI,CAAC,OAAO,eAAe,GAAG,EAAG,SACjC,GAAI,MAAQ,cAAgB,MAAQ,SAAU,SAC9C,MAAM,GAAG,EAAI,OAAO,GAAG,CACzB,CAEA,IAAI,MAAQ,MAAM,OAAS,CAAC,EAC5B,IAAK,OAAO,OAAQ,CAClB,GAAI,CAAC,OAAO,eAAe,GAAG,EAAG,SACjC,GAAI,MAAQ,eAAiB,MAAQ,kBAAmB,SACxD,MAAM,GAAG,EAAI,OAAO,GAAG,CACzB,CAEA,MAAM,OAAO,UAAY,OAAO,UAEhC,GAAI,CAAC,MAAM,MAAQ,MAAM,OAAS,WAAW,KAAM,CACjD,MAAM,KAAO,SAAU,MAAO,iBAAkB,OAAQ,CACtD,GAAI,OAAO,QAAU,SAAU,CAC7B,MAAM,IAAI,UAAU,kEAAoE,OAAO,KAAK,CACtG,CACA,GAAI,OAAS,OAAO,MAAM,SAAW,YAAa,CAChD,MAAM,IAAI,UAAU,kHAAoH,OAAO,KAAK,CACtJ,CACA,OAAO,OAAO,MAAO,iBAAkB,MAAM,CAC/C,CACF,CAEA,GAAI,CAAC,MAAM,MAAO,CAChB,MAAM,MAAQ,SAAU,KAAM,KAAM,SAAU,CAC5C,GAAI,OAAO,OAAS,SAAU,CAC5B,MAAM,IAAI,UAAU,6DAA+D,OAAO,IAAI,CAChG,CACA,GAAI,KAAO,GAAK,MAAQ,GAAK,GAAK,IAAK,CACrC,MAAM,IAAI,WAAW,cAAgB,KAAO,gCAAgC,CAC9E,CACA,IAAI,IAAM,OAAO,IAAI,EACrB,GAAI,CAAC,MAAQ,KAAK,SAAW,EAAG,CAC9B,IAAI,KAAK,CAAC,CACZ,SAAW,OAAO,WAAa,SAAU,CACvC,IAAI,KAAK,KAAM,QAAQ,CACzB,KAAO,CACL,IAAI,KAAK,IAAI,CACf,CACA,OAAO,GACT,CACF,CAEA,GAAI,CAAC,MAAM,iBAAkB,CAC3B,GAAI,CACF,MAAM,iBAAmB,QAAQ,QAAQ,QAAQ,EAAE,gBACrD,OAAS,EAAG,CAGZ,CACF,CAEA,GAAI,CAAC,MAAM,UAAW,CACpB,MAAM,UAAY,CAChB,WAAY,MAAM,UACpB,EACA,GAAI,MAAM,iBAAkB,CAC1B,MAAM,UAAU,kBAAoB,MAAM,gBAC5C,CACF,CAEA,OAAO,QAAU","names":[],"sources":["/home/creditga/CofiCarte/node_modules/.pnpm/safer-buffer@2.1.2/node_modules/safer-buffer/safer.js"],"sourcesContent":["/* eslint-disable node/no-deprecated-api */\n\n'use strict'\n\nvar buffer = require('buffer')\nvar Buffer = buffer.Buffer\n\nvar safer = {}\n\nvar key\n\nfor (key in buffer) {\n  if (!buffer.hasOwnProperty(key)) continue\n  if (key === 'SlowBuffer' || key === 'Buffer') continue\n  safer[key] = buffer[key]\n}\n\nvar Safer = safer.Buffer = {}\nfor (key in Buffer) {\n  if (!Buffer.hasOwnProperty(key)) continue\n  if (key === 'allocUnsafe' || key === 'allocUnsafeSlow') continue\n  Safer[key] = Buffer[key]\n}\n\nsafer.Buffer.prototype = Buffer.prototype\n\nif (!Safer.from || Safer.from === Uint8Array.from) {\n  Safer.from = function (value, encodingOrOffset, length) {\n    if (typeof value === 'number') {\n      throw new TypeError('The \"value\" argument must not be of type number. Received type ' + typeof value)\n    }\n    if (value && typeof value.length === 'undefined') {\n      throw new TypeError('The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type ' + typeof value)\n    }\n    return Buffer(value, encodingOrOffset, length)\n  }\n}\n\nif (!Safer.alloc) {\n  Safer.alloc = function (size, fill, encoding) {\n    if (typeof size !== 'number') {\n      throw new TypeError('The \"size\" argument must be of type number. Received type ' + typeof size)\n    }\n    if (size < 0 || size >= 2 * (1 << 30)) {\n      throw new RangeError('The value \"' + size + '\" is invalid for option \"size\"')\n    }\n    var buf = Buffer(size)\n    if (!fill || fill.length === 0) {\n      buf.fill(0)\n    } else if (typeof encoding === 'string') {\n      buf.fill(fill, encoding)\n    } else {\n      buf.fill(fill)\n    }\n    return buf\n  }\n}\n\nif (!safer.kStringMaxLength) {\n  try {\n    safer.kStringMaxLength = process.binding('buffer').kStringMaxLength\n  } catch (e) {\n    // we can't determine kStringMaxLength in environments where process.binding\n    // is unsupported, so let's not set it\n  }\n}\n\nif (!safer.constants) {\n  safer.constants = {\n    MAX_LENGTH: safer.kMaxLength\n  }\n  if (safer.kStringMaxLength) {\n    safer.constants.MAX_STRING_LENGTH = safer.kStringMaxLength\n  }\n}\n\nmodule.exports = safer\n"]}}