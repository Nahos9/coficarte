{"code":"(()=>{\n\"use strict\";var __defProp=Object.defineProperty;var __name=(target,value)=>__defProp(target,\"name\",{value,configurable:true});function isCTLExcludingHtab(value){for(let i=0;i<value.length;++i){const code=value.charCodeAt(i);if(code>=0&&code<=8||code>=10&&code<=31||code===127){return true}}return false}__name(isCTLExcludingHtab,\"isCTLExcludingHtab\");function validateCookieName(name){for(let i=0;i<name.length;++i){const code=name.charCodeAt(i);if(code<33||code>126||code===34||code===40||code===41||code===60||code===62||code===64||code===44||code===59||code===58||code===92||code===47||code===91||code===93||code===63||code===61||code===123||code===125){throw new Error(\"Invalid cookie name\")}}}__name(validateCookieName,\"validateCookieName\");function validateCookieValue(value){let len=value.length;let i=0;if(value[0]==='\"'){if(len===1||value[len-1]!=='\"'){throw new Error(\"Invalid cookie value\")}--len;++i}while(i<len){const code=value.charCodeAt(i++);if(code<33||code>126||code===34||code===44||code===59||code===92){throw new Error(\"Invalid cookie value\")}}}__name(validateCookieValue,\"validateCookieValue\");function validateCookiePath(path){for(let i=0;i<path.length;++i){const code=path.charCodeAt(i);if(code<32||code===127||code===59){throw new Error(\"Invalid cookie path\")}}}__name(validateCookiePath,\"validateCookiePath\");function validateCookieDomain(domain){if(domain.startsWith(\"-\")||domain.endsWith(\".\")||domain.endsWith(\"-\")){throw new Error(\"Invalid cookie domain\")}}__name(validateCookieDomain,\"validateCookieDomain\");const IMFDays=[\"Sun\",\"Mon\",\"Tue\",\"Wed\",\"Thu\",\"Fri\",\"Sat\"];const IMFMonths=[\"Jan\",\"Feb\",\"Mar\",\"Apr\",\"May\",\"Jun\",\"Jul\",\"Aug\",\"Sep\",\"Oct\",\"Nov\",\"Dec\"];const IMFPaddedNumbers=Array(61).fill(0).map((_,i)=>i.toString().padStart(2,\"0\"));function toIMFDate(date){if(typeof date===\"number\"){date=new Date(date)}return`${IMFDays[date.getUTCDay()]}, ${IMFPaddedNumbers[date.getUTCDate()]} ${IMFMonths[date.getUTCMonth()]} ${date.getUTCFullYear()} ${IMFPaddedNumbers[date.getUTCHours()]}:${IMFPaddedNumbers[date.getUTCMinutes()]}:${IMFPaddedNumbers[date.getUTCSeconds()]} GMT`}__name(toIMFDate,\"toIMFDate\");function validateCookieMaxAge(maxAge){if(maxAge<0){throw new Error(\"Invalid cookie max-age\")}}__name(validateCookieMaxAge,\"validateCookieMaxAge\");function stringify(cookie){if(cookie.name.length===0){return null}validateCookieName(cookie.name);validateCookieValue(cookie.value);const out=[`${cookie.name}=${cookie.value}`];if(cookie.name.startsWith(\"__Secure-\")){cookie.secure=true}if(cookie.name.startsWith(\"__Host-\")){cookie.secure=true;cookie.domain=null;cookie.path=\"/\"}if(cookie.secure){out.push(\"Secure\")}if(cookie.httpOnly){out.push(\"HttpOnly\")}if(typeof cookie.maxAge===\"number\"){validateCookieMaxAge(cookie.maxAge);out.push(`Max-Age=${cookie.maxAge}`)}if(cookie.domain){validateCookieDomain(cookie.domain);out.push(`Domain=${cookie.domain}`)}if(cookie.path){validateCookiePath(cookie.path);out.push(`Path=${cookie.path}`)}if(cookie.expires&&cookie.expires.toString()!==\"Invalid Date\"){out.push(`Expires=${toIMFDate(cookie.expires)}`)}if(cookie.sameSite){out.push(`SameSite=${cookie.sameSite}`)}for(const part of cookie.unparsed){if(!part.includes(\"=\")){throw new Error(\"Invalid unparsed\")}const[key,...value]=part.split(\"=\");out.push(`${key.trim()}=${value.join(\"=\")}`)}return out.join(\"; \")}__name(stringify,\"stringify\");module.exports={isCTLExcludingHtab,validateCookieName,validateCookiePath,validateCookieValue,toIMFDate,stringify};\n})()\n","warnings":[],"map":{"version":3,"mappings":"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","names":[],"sources":["/home/creditga/CofiCarte/node_modules/.pnpm/undici@6.21.0/node_modules/undici/lib/web/cookies/util.js"],"sourcesContent":["'use strict'\n\n/**\n * @param {string} value\n * @returns {boolean}\n */\nfunction isCTLExcludingHtab (value) {\n  for (let i = 0; i < value.length; ++i) {\n    const code = value.charCodeAt(i)\n\n    if (\n      (code >= 0x00 && code <= 0x08) ||\n      (code >= 0x0A && code <= 0x1F) ||\n      code === 0x7F\n    ) {\n      return true\n    }\n  }\n  return false\n}\n\n/**\n CHAR           = <any US-ASCII character (octets 0 - 127)>\n token          = 1*<any CHAR except CTLs or separators>\n separators     = \"(\" | \")\" | \"<\" | \">\" | \"@\"\n                | \",\" | \";\" | \":\" | \"\\\" | <\">\n                | \"/\" | \"[\" | \"]\" | \"?\" | \"=\"\n                | \"{\" | \"}\" | SP | HT\n * @param {string} name\n */\nfunction validateCookieName (name) {\n  for (let i = 0; i < name.length; ++i) {\n    const code = name.charCodeAt(i)\n\n    if (\n      code < 0x21 || // exclude CTLs (0-31), SP and HT\n      code > 0x7E || // exclude non-ascii and DEL\n      code === 0x22 || // \"\n      code === 0x28 || // (\n      code === 0x29 || // )\n      code === 0x3C || // <\n      code === 0x3E || // >\n      code === 0x40 || // @\n      code === 0x2C || // ,\n      code === 0x3B || // ;\n      code === 0x3A || // :\n      code === 0x5C || // \\\n      code === 0x2F || // /\n      code === 0x5B || // [\n      code === 0x5D || // ]\n      code === 0x3F || // ?\n      code === 0x3D || // =\n      code === 0x7B || // {\n      code === 0x7D // }\n    ) {\n      throw new Error('Invalid cookie name')\n    }\n  }\n}\n\n/**\n cookie-value      = *cookie-octet / ( DQUOTE *cookie-octet DQUOTE )\n cookie-octet      = %x21 / %x23-2B / %x2D-3A / %x3C-5B / %x5D-7E\n                       ; US-ASCII characters excluding CTLs,\n                       ; whitespace DQUOTE, comma, semicolon,\n                       ; and backslash\n * @param {string} value\n */\nfunction validateCookieValue (value) {\n  let len = value.length\n  let i = 0\n\n  // if the value is wrapped in DQUOTE\n  if (value[0] === '\"') {\n    if (len === 1 || value[len - 1] !== '\"') {\n      throw new Error('Invalid cookie value')\n    }\n    --len\n    ++i\n  }\n\n  while (i < len) {\n    const code = value.charCodeAt(i++)\n\n    if (\n      code < 0x21 || // exclude CTLs (0-31)\n      code > 0x7E || // non-ascii and DEL (127)\n      code === 0x22 || // \"\n      code === 0x2C || // ,\n      code === 0x3B || // ;\n      code === 0x5C // \\\n    ) {\n      throw new Error('Invalid cookie value')\n    }\n  }\n}\n\n/**\n * path-value        = <any CHAR except CTLs or \";\">\n * @param {string} path\n */\nfunction validateCookiePath (path) {\n  for (let i = 0; i < path.length; ++i) {\n    const code = path.charCodeAt(i)\n\n    if (\n      code < 0x20 || // exclude CTLs (0-31)\n      code === 0x7F || // DEL\n      code === 0x3B // ;\n    ) {\n      throw new Error('Invalid cookie path')\n    }\n  }\n}\n\n/**\n * I have no idea why these values aren't allowed to be honest,\n * but Deno tests these. - Khafra\n * @param {string} domain\n */\nfunction validateCookieDomain (domain) {\n  if (\n    domain.startsWith('-') ||\n    domain.endsWith('.') ||\n    domain.endsWith('-')\n  ) {\n    throw new Error('Invalid cookie domain')\n  }\n}\n\nconst IMFDays = [\n  'Sun', 'Mon', 'Tue', 'Wed',\n  'Thu', 'Fri', 'Sat'\n]\n\nconst IMFMonths = [\n  'Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun',\n  'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'\n]\n\nconst IMFPaddedNumbers = Array(61).fill(0).map((_, i) => i.toString().padStart(2, '0'))\n\n/**\n * @see https://www.rfc-editor.org/rfc/rfc7231#section-7.1.1.1\n * @param {number|Date} date\n  IMF-fixdate  = day-name \",\" SP date1 SP time-of-day SP GMT\n  ; fixed length/zone/capitalization subset of the format\n  ; see Section 3.3 of [RFC5322]\n\n  day-name     = %x4D.6F.6E ; \"Mon\", case-sensitive\n              / %x54.75.65 ; \"Tue\", case-sensitive\n              / %x57.65.64 ; \"Wed\", case-sensitive\n              / %x54.68.75 ; \"Thu\", case-sensitive\n              / %x46.72.69 ; \"Fri\", case-sensitive\n              / %x53.61.74 ; \"Sat\", case-sensitive\n              / %x53.75.6E ; \"Sun\", case-sensitive\n  date1        = day SP month SP year\n                  ; e.g., 02 Jun 1982\n\n  day          = 2DIGIT\n  month        = %x4A.61.6E ; \"Jan\", case-sensitive\n              / %x46.65.62 ; \"Feb\", case-sensitive\n              / %x4D.61.72 ; \"Mar\", case-sensitive\n              / %x41.70.72 ; \"Apr\", case-sensitive\n              / %x4D.61.79 ; \"May\", case-sensitive\n              / %x4A.75.6E ; \"Jun\", case-sensitive\n              / %x4A.75.6C ; \"Jul\", case-sensitive\n              / %x41.75.67 ; \"Aug\", case-sensitive\n              / %x53.65.70 ; \"Sep\", case-sensitive\n              / %x4F.63.74 ; \"Oct\", case-sensitive\n              / %x4E.6F.76 ; \"Nov\", case-sensitive\n              / %x44.65.63 ; \"Dec\", case-sensitive\n  year         = 4DIGIT\n\n  GMT          = %x47.4D.54 ; \"GMT\", case-sensitive\n\n  time-of-day  = hour \":\" minute \":\" second\n              ; 00:00:00 - 23:59:60 (leap second)\n\n  hour         = 2DIGIT\n  minute       = 2DIGIT\n  second       = 2DIGIT\n */\nfunction toIMFDate (date) {\n  if (typeof date === 'number') {\n    date = new Date(date)\n  }\n\n  return `${IMFDays[date.getUTCDay()]}, ${IMFPaddedNumbers[date.getUTCDate()]} ${IMFMonths[date.getUTCMonth()]} ${date.getUTCFullYear()} ${IMFPaddedNumbers[date.getUTCHours()]}:${IMFPaddedNumbers[date.getUTCMinutes()]}:${IMFPaddedNumbers[date.getUTCSeconds()]} GMT`\n}\n\n/**\n max-age-av        = \"Max-Age=\" non-zero-digit *DIGIT\n                       ; In practice, both expires-av and max-age-av\n                       ; are limited to dates representable by the\n                       ; user agent.\n * @param {number} maxAge\n */\nfunction validateCookieMaxAge (maxAge) {\n  if (maxAge < 0) {\n    throw new Error('Invalid cookie max-age')\n  }\n}\n\n/**\n * @see https://www.rfc-editor.org/rfc/rfc6265#section-4.1.1\n * @param {import('./index').Cookie} cookie\n */\nfunction stringify (cookie) {\n  if (cookie.name.length === 0) {\n    return null\n  }\n\n  validateCookieName(cookie.name)\n  validateCookieValue(cookie.value)\n\n  const out = [`${cookie.name}=${cookie.value}`]\n\n  // https://datatracker.ietf.org/doc/html/draft-ietf-httpbis-cookie-prefixes-00#section-3.1\n  // https://datatracker.ietf.org/doc/html/draft-ietf-httpbis-cookie-prefixes-00#section-3.2\n  if (cookie.name.startsWith('__Secure-')) {\n    cookie.secure = true\n  }\n\n  if (cookie.name.startsWith('__Host-')) {\n    cookie.secure = true\n    cookie.domain = null\n    cookie.path = '/'\n  }\n\n  if (cookie.secure) {\n    out.push('Secure')\n  }\n\n  if (cookie.httpOnly) {\n    out.push('HttpOnly')\n  }\n\n  if (typeof cookie.maxAge === 'number') {\n    validateCookieMaxAge(cookie.maxAge)\n    out.push(`Max-Age=${cookie.maxAge}`)\n  }\n\n  if (cookie.domain) {\n    validateCookieDomain(cookie.domain)\n    out.push(`Domain=${cookie.domain}`)\n  }\n\n  if (cookie.path) {\n    validateCookiePath(cookie.path)\n    out.push(`Path=${cookie.path}`)\n  }\n\n  if (cookie.expires && cookie.expires.toString() !== 'Invalid Date') {\n    out.push(`Expires=${toIMFDate(cookie.expires)}`)\n  }\n\n  if (cookie.sameSite) {\n    out.push(`SameSite=${cookie.sameSite}`)\n  }\n\n  for (const part of cookie.unparsed) {\n    if (!part.includes('=')) {\n      throw new Error('Invalid unparsed')\n    }\n\n    const [key, ...value] = part.split('=')\n\n    out.push(`${key.trim()}=${value.join('=')}`)\n  }\n\n  return out.join('; ')\n}\n\nmodule.exports = {\n  isCTLExcludingHtab,\n  validateCookieName,\n  validateCookiePath,\n  validateCookieValue,\n  toIMFDate,\n  stringify\n}\n"]}}