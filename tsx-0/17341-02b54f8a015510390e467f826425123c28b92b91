{"code":"(()=>{\n\"use strict\";var __defProp=Object.defineProperty;var __name=(target,value)=>__defProp(target,\"name\",{value,configurable:true});const MIMETypeParameters=require(\"./mime-type-parameters.js\");const parse=require(\"./parser.js\");const serialize=require(\"./serializer.js\");const{asciiLowercase,solelyContainsHTTPTokenCodePoints}=require(\"./utils.js\");module.exports=class MIMEType{static{__name(this,\"MIMEType\")}constructor(string){string=String(string);const result=parse(string);if(result===null){throw new Error(`Could not parse MIME type string \"${string}\"`)}this._type=result.type;this._subtype=result.subtype;this._parameters=new MIMETypeParameters(result.parameters)}static parse(string){try{return new this(string)}catch(e){return null}}get essence(){return`${this.type}/${this.subtype}`}get type(){return this._type}set type(value){value=asciiLowercase(String(value));if(value.length===0){throw new Error(\"Invalid type: must be a non-empty string\")}if(!solelyContainsHTTPTokenCodePoints(value)){throw new Error(`Invalid type ${value}: must contain only HTTP token code points`)}this._type=value}get subtype(){return this._subtype}set subtype(value){value=asciiLowercase(String(value));if(value.length===0){throw new Error(\"Invalid subtype: must be a non-empty string\")}if(!solelyContainsHTTPTokenCodePoints(value)){throw new Error(`Invalid subtype ${value}: must contain only HTTP token code points`)}this._subtype=value}get parameters(){return this._parameters}toString(){return serialize(this)}isJavaScript({prohibitParameters=false}={}){switch(this._type){case\"text\":{switch(this._subtype){case\"ecmascript\":case\"javascript\":case\"javascript1.0\":case\"javascript1.1\":case\"javascript1.2\":case\"javascript1.3\":case\"javascript1.4\":case\"javascript1.5\":case\"jscript\":case\"livescript\":case\"x-ecmascript\":case\"x-javascript\":{return!prohibitParameters||this._parameters.size===0}default:{return false}}}case\"application\":{switch(this._subtype){case\"ecmascript\":case\"javascript\":case\"x-ecmascript\":case\"x-javascript\":{return!prohibitParameters||this._parameters.size===0}default:{return false}}}default:{return false}}}isXML(){return this._subtype===\"xml\"&&(this._type===\"text\"||this._type===\"application\")||this._subtype.endsWith(\"+xml\")}isHTML(){return this._subtype===\"html\"&&this._type===\"text\"}};\n})()\n","warnings":[],"map":{"version":3,"mappings":";+HACA,MAAM,mBAAqB,QAAQ,2BAA2B,EAC9D,MAAM,MAAQ,QAAQ,aAAa,EACnC,MAAM,UAAY,QAAQ,iBAAiB,EAC3C,KAAM,CACJ,eACA,iCACF,EAAI,QAAQ,YAAY,EAExB,OAAO,QAAU,MAAM,QAAS,CAThC,MASgC,yBAC9B,YAAY,OAAQ,CAClB,OAAS,OAAO,MAAM,EACtB,MAAM,OAAS,MAAM,MAAM,EAC3B,GAAI,SAAW,KAAM,CACnB,MAAM,IAAI,MAAM,qCAAqC,MAAM,GAAG,CAChE,CAEA,KAAK,MAAQ,OAAO,KACpB,KAAK,SAAW,OAAO,QACvB,KAAK,YAAc,IAAI,mBAAmB,OAAO,UAAU,CAC7D,CAEA,OAAO,MAAM,OAAQ,CACnB,GAAI,CACF,OAAO,IAAI,KAAK,MAAM,CACxB,OAAS,EAAG,CACV,OAAO,IACT,CACF,CAEA,IAAI,SAAU,CACZ,MAAO,GAAG,KAAK,IAAI,IAAI,KAAK,OAAO,EACrC,CAEA,IAAI,MAAO,CACT,OAAO,KAAK,KACd,CAEA,IAAI,KAAK,MAAO,CACd,MAAQ,eAAe,OAAO,KAAK,CAAC,EAEpC,GAAI,MAAM,SAAW,EAAG,CACtB,MAAM,IAAI,MAAM,0CAA0C,CAC5D,CACA,GAAI,CAAC,kCAAkC,KAAK,EAAG,CAC7C,MAAM,IAAI,MAAM,gBAAgB,KAAK,4CAA4C,CACnF,CAEA,KAAK,MAAQ,KACf,CAEA,IAAI,SAAU,CACZ,OAAO,KAAK,QACd,CAEA,IAAI,QAAQ,MAAO,CACjB,MAAQ,eAAe,OAAO,KAAK,CAAC,EAEpC,GAAI,MAAM,SAAW,EAAG,CACtB,MAAM,IAAI,MAAM,6CAA6C,CAC/D,CACA,GAAI,CAAC,kCAAkC,KAAK,EAAG,CAC7C,MAAM,IAAI,MAAM,mBAAmB,KAAK,4CAA4C,CACtF,CAEA,KAAK,SAAW,KAClB,CAEA,IAAI,YAAa,CACf,OAAO,KAAK,WACd,CAEA,UAAW,CAGT,OAAO,UAAU,IAAI,CACvB,CAEA,aAAa,CAAE,mBAAqB,KAAM,EAAI,CAAC,EAAG,CAChD,OAAQ,KAAK,MAAO,CAClB,IAAK,OAAQ,CACX,OAAQ,KAAK,SAAU,CACrB,IAAK,aACL,IAAK,aACL,IAAK,gBACL,IAAK,gBACL,IAAK,gBACL,IAAK,gBACL,IAAK,gBACL,IAAK,gBACL,IAAK,UACL,IAAK,aACL,IAAK,eACL,IAAK,eAAgB,CACnB,MAAO,CAAC,oBAAsB,KAAK,YAAY,OAAS,CAC1D,CACA,QAAS,CACP,MAAO,MACT,CACF,CACF,CACA,IAAK,cAAe,CAClB,OAAQ,KAAK,SAAU,CACrB,IAAK,aACL,IAAK,aACL,IAAK,eACL,IAAK,eAAgB,CACnB,MAAO,CAAC,oBAAsB,KAAK,YAAY,OAAS,CAC1D,CACA,QAAS,CACP,MAAO,MACT,CACF,CACF,CACA,QAAS,CACP,MAAO,MACT,CACF,CACF,CACA,OAAQ,CACN,OAAQ,KAAK,WAAa,QAAU,KAAK,QAAU,QAAU,KAAK,QAAU,gBACrE,KAAK,SAAS,SAAS,MAAM,CACtC,CACA,QAAS,CACP,OAAO,KAAK,WAAa,QAAU,KAAK,QAAU,MACpD,CACF","names":[],"sources":["/home/creditga/CofiCarte/node_modules/.pnpm/whatwg-mimetype@4.0.0/node_modules/whatwg-mimetype/lib/mime-type.js"],"sourcesContent":["\"use strict\";\nconst MIMETypeParameters = require(\"./mime-type-parameters.js\");\nconst parse = require(\"./parser.js\");\nconst serialize = require(\"./serializer.js\");\nconst {\n  asciiLowercase,\n  solelyContainsHTTPTokenCodePoints\n} = require(\"./utils.js\");\n\nmodule.exports = class MIMEType {\n  constructor(string) {\n    string = String(string);\n    const result = parse(string);\n    if (result === null) {\n      throw new Error(`Could not parse MIME type string \"${string}\"`);\n    }\n\n    this._type = result.type;\n    this._subtype = result.subtype;\n    this._parameters = new MIMETypeParameters(result.parameters);\n  }\n\n  static parse(string) {\n    try {\n      return new this(string);\n    } catch (e) {\n      return null;\n    }\n  }\n\n  get essence() {\n    return `${this.type}/${this.subtype}`;\n  }\n\n  get type() {\n    return this._type;\n  }\n\n  set type(value) {\n    value = asciiLowercase(String(value));\n\n    if (value.length === 0) {\n      throw new Error(\"Invalid type: must be a non-empty string\");\n    }\n    if (!solelyContainsHTTPTokenCodePoints(value)) {\n      throw new Error(`Invalid type ${value}: must contain only HTTP token code points`);\n    }\n\n    this._type = value;\n  }\n\n  get subtype() {\n    return this._subtype;\n  }\n\n  set subtype(value) {\n    value = asciiLowercase(String(value));\n\n    if (value.length === 0) {\n      throw new Error(\"Invalid subtype: must be a non-empty string\");\n    }\n    if (!solelyContainsHTTPTokenCodePoints(value)) {\n      throw new Error(`Invalid subtype ${value}: must contain only HTTP token code points`);\n    }\n\n    this._subtype = value;\n  }\n\n  get parameters() {\n    return this._parameters;\n  }\n\n  toString() {\n    // The serialize function works on both \"MIME type records\" (i.e. the results of parse) and on this class, since\n    // this class's interface is identical.\n    return serialize(this);\n  }\n\n  isJavaScript({ prohibitParameters = false } = {}) {\n    switch (this._type) {\n      case \"text\": {\n        switch (this._subtype) {\n          case \"ecmascript\":\n          case \"javascript\":\n          case \"javascript1.0\":\n          case \"javascript1.1\":\n          case \"javascript1.2\":\n          case \"javascript1.3\":\n          case \"javascript1.4\":\n          case \"javascript1.5\":\n          case \"jscript\":\n          case \"livescript\":\n          case \"x-ecmascript\":\n          case \"x-javascript\": {\n            return !prohibitParameters || this._parameters.size === 0;\n          }\n          default: {\n            return false;\n          }\n        }\n      }\n      case \"application\": {\n        switch (this._subtype) {\n          case \"ecmascript\":\n          case \"javascript\":\n          case \"x-ecmascript\":\n          case \"x-javascript\": {\n            return !prohibitParameters || this._parameters.size === 0;\n          }\n          default: {\n            return false;\n          }\n        }\n      }\n      default: {\n        return false;\n      }\n    }\n  }\n  isXML() {\n    return (this._subtype === \"xml\" && (this._type === \"text\" || this._type === \"application\")) ||\n           this._subtype.endsWith(\"+xml\");\n  }\n  isHTML() {\n    return this._subtype === \"html\" && this._type === \"text\";\n  }\n};\n"]}}