{"code":"(()=>{\n\"use strict\";var __defProp=Object.defineProperty;var __name=(target,value)=>__defProp(target,\"name\",{value,configurable:true});var Buffer2=require(\"safer-buffer\").Buffer;var bomHandling=require(\"./bom-handling\"),iconv=module.exports;iconv.encodings=null;iconv.defaultCharUnicode=\"\\uFFFD\";iconv.defaultCharSingleByte=\"?\";iconv.encode=__name(function encode(str,encoding,options){str=\"\"+(str||\"\");var encoder=iconv.getEncoder(encoding,options);var res=encoder.write(str);var trail=encoder.end();return trail&&trail.length>0?Buffer2.concat([res,trail]):res},\"encode\");iconv.decode=__name(function decode(buf,encoding,options){if(typeof buf===\"string\"){if(!iconv.skipDecodeWarning){console.error(\"Iconv-lite warning: decode()-ing strings is deprecated. Refer to https://github.com/ashtuchkin/iconv-lite/wiki/Use-Buffers-when-decoding\");iconv.skipDecodeWarning=true}buf=Buffer2.from(\"\"+(buf||\"\"),\"binary\")}var decoder=iconv.getDecoder(encoding,options);var res=decoder.write(buf);var trail=decoder.end();return trail?res+trail:res},\"decode\");iconv.encodingExists=__name(function encodingExists(enc){try{iconv.getCodec(enc);return true}catch(e){return false}},\"encodingExists\");iconv.toEncoding=iconv.encode;iconv.fromEncoding=iconv.decode;iconv._codecDataCache={};iconv.getCodec=__name(function getCodec(encoding){if(!iconv.encodings)iconv.encodings=require(\"../encodings\");var enc=iconv._canonicalizeEncoding(encoding);var codecOptions={};while(true){var codec=iconv._codecDataCache[enc];if(codec)return codec;var codecDef=iconv.encodings[enc];switch(typeof codecDef){case\"string\":enc=codecDef;break;case\"object\":for(var key in codecDef)codecOptions[key]=codecDef[key];if(!codecOptions.encodingName)codecOptions.encodingName=enc;enc=codecDef.type;break;case\"function\":if(!codecOptions.encodingName)codecOptions.encodingName=enc;codec=new codecDef(codecOptions,iconv);iconv._codecDataCache[codecOptions.encodingName]=codec;return codec;default:throw new Error(\"Encoding not recognized: '\"+encoding+\"' (searched as: '\"+enc+\"')\")}}},\"getCodec\");iconv._canonicalizeEncoding=function(encoding){return(\"\"+encoding).toLowerCase().replace(/:\\d{4}$|[^0-9a-z]/g,\"\")};iconv.getEncoder=__name(function getEncoder(encoding,options){var codec=iconv.getCodec(encoding),encoder=new codec.encoder(options,codec);if(codec.bomAware&&options&&options.addBOM)encoder=new bomHandling.PrependBOM(encoder,options);return encoder},\"getEncoder\");iconv.getDecoder=__name(function getDecoder(encoding,options){var codec=iconv.getCodec(encoding),decoder=new codec.decoder(options,codec);if(codec.bomAware&&!(options&&options.stripBOM===false))decoder=new bomHandling.StripBOM(decoder,options);return decoder},\"getDecoder\");iconv.enableStreamingAPI=__name(function enableStreamingAPI(stream_module2){if(iconv.supportsStreams)return;var streams=require(\"./streams\")(stream_module2);iconv.IconvLiteEncoderStream=streams.IconvLiteEncoderStream;iconv.IconvLiteDecoderStream=streams.IconvLiteDecoderStream;iconv.encodeStream=__name(function encodeStream(encoding,options){return new iconv.IconvLiteEncoderStream(iconv.getEncoder(encoding,options),options)},\"encodeStream\");iconv.decodeStream=__name(function decodeStream(encoding,options){return new iconv.IconvLiteDecoderStream(iconv.getDecoder(encoding,options),options)},\"decodeStream\");iconv.supportsStreams=true},\"enableStreamingAPI\");var stream_module;try{stream_module=require(\"stream\")}catch(e){}if(stream_module&&stream_module.Transform){iconv.enableStreamingAPI(stream_module)}else{iconv.encodeStream=iconv.decodeStream=function(){throw new Error(\"iconv-lite Streaming API is not enabled. Use iconv.enableStreamingAPI(require('stream')); to enable it.\")}}if(false){console.error(\"iconv-lite warning: js files use non-utf8 encoding. See https://github.com/ashtuchkin/iconv-lite/wiki/Javascript-source-file-encodings for more info.\")}\n})()\n","warnings":[],"map":{"version":3,"mappings":"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","names":["Buffer","stream_module"],"sources":["/home/creditga/CofiCarte/node_modules/.pnpm/iconv-lite@0.6.3/node_modules/iconv-lite/lib/index.js"],"sourcesContent":["\"use strict\";\n\nvar Buffer = require(\"safer-buffer\").Buffer;\n\nvar bomHandling = require(\"./bom-handling\"),\n    iconv = module.exports;\n\n// All codecs and aliases are kept here, keyed by encoding name/alias.\n// They are lazy loaded in `iconv.getCodec` from `encodings/index.js`.\niconv.encodings = null;\n\n// Characters emitted in case of error.\niconv.defaultCharUnicode = 'ï¿½';\niconv.defaultCharSingleByte = '?';\n\n// Public API.\niconv.encode = function encode(str, encoding, options) {\n    str = \"\" + (str || \"\"); // Ensure string.\n\n    var encoder = iconv.getEncoder(encoding, options);\n\n    var res = encoder.write(str);\n    var trail = encoder.end();\n    \n    return (trail && trail.length > 0) ? Buffer.concat([res, trail]) : res;\n}\n\niconv.decode = function decode(buf, encoding, options) {\n    if (typeof buf === 'string') {\n        if (!iconv.skipDecodeWarning) {\n            console.error('Iconv-lite warning: decode()-ing strings is deprecated. Refer to https://github.com/ashtuchkin/iconv-lite/wiki/Use-Buffers-when-decoding');\n            iconv.skipDecodeWarning = true;\n        }\n\n        buf = Buffer.from(\"\" + (buf || \"\"), \"binary\"); // Ensure buffer.\n    }\n\n    var decoder = iconv.getDecoder(encoding, options);\n\n    var res = decoder.write(buf);\n    var trail = decoder.end();\n\n    return trail ? (res + trail) : res;\n}\n\niconv.encodingExists = function encodingExists(enc) {\n    try {\n        iconv.getCodec(enc);\n        return true;\n    } catch (e) {\n        return false;\n    }\n}\n\n// Legacy aliases to convert functions\niconv.toEncoding = iconv.encode;\niconv.fromEncoding = iconv.decode;\n\n// Search for a codec in iconv.encodings. Cache codec data in iconv._codecDataCache.\niconv._codecDataCache = {};\niconv.getCodec = function getCodec(encoding) {\n    if (!iconv.encodings)\n        iconv.encodings = require(\"../encodings\"); // Lazy load all encoding definitions.\n    \n    // Canonicalize encoding name: strip all non-alphanumeric chars and appended year.\n    var enc = iconv._canonicalizeEncoding(encoding);\n\n    // Traverse iconv.encodings to find actual codec.\n    var codecOptions = {};\n    while (true) {\n        var codec = iconv._codecDataCache[enc];\n        if (codec)\n            return codec;\n\n        var codecDef = iconv.encodings[enc];\n\n        switch (typeof codecDef) {\n            case \"string\": // Direct alias to other encoding.\n                enc = codecDef;\n                break;\n\n            case \"object\": // Alias with options. Can be layered.\n                for (var key in codecDef)\n                    codecOptions[key] = codecDef[key];\n\n                if (!codecOptions.encodingName)\n                    codecOptions.encodingName = enc;\n                \n                enc = codecDef.type;\n                break;\n\n            case \"function\": // Codec itself.\n                if (!codecOptions.encodingName)\n                    codecOptions.encodingName = enc;\n\n                // The codec function must load all tables and return object with .encoder and .decoder methods.\n                // It'll be called only once (for each different options object).\n                codec = new codecDef(codecOptions, iconv);\n\n                iconv._codecDataCache[codecOptions.encodingName] = codec; // Save it to be reused later.\n                return codec;\n\n            default:\n                throw new Error(\"Encoding not recognized: '\" + encoding + \"' (searched as: '\"+enc+\"')\");\n        }\n    }\n}\n\niconv._canonicalizeEncoding = function(encoding) {\n    // Canonicalize encoding name: strip all non-alphanumeric chars and appended year.\n    return (''+encoding).toLowerCase().replace(/:\\d{4}$|[^0-9a-z]/g, \"\");\n}\n\niconv.getEncoder = function getEncoder(encoding, options) {\n    var codec = iconv.getCodec(encoding),\n        encoder = new codec.encoder(options, codec);\n\n    if (codec.bomAware && options && options.addBOM)\n        encoder = new bomHandling.PrependBOM(encoder, options);\n\n    return encoder;\n}\n\niconv.getDecoder = function getDecoder(encoding, options) {\n    var codec = iconv.getCodec(encoding),\n        decoder = new codec.decoder(options, codec);\n\n    if (codec.bomAware && !(options && options.stripBOM === false))\n        decoder = new bomHandling.StripBOM(decoder, options);\n\n    return decoder;\n}\n\n// Streaming API\n// NOTE: Streaming API naturally depends on 'stream' module from Node.js. Unfortunately in browser environments this module can add\n// up to 100Kb to the output bundle. To avoid unnecessary code bloat, we don't enable Streaming API in browser by default.\n// If you would like to enable it explicitly, please add the following code to your app:\n// > iconv.enableStreamingAPI(require('stream'));\niconv.enableStreamingAPI = function enableStreamingAPI(stream_module) {\n    if (iconv.supportsStreams)\n        return;\n\n    // Dependency-inject stream module to create IconvLite stream classes.\n    var streams = require(\"./streams\")(stream_module);\n\n    // Not public API yet, but expose the stream classes.\n    iconv.IconvLiteEncoderStream = streams.IconvLiteEncoderStream;\n    iconv.IconvLiteDecoderStream = streams.IconvLiteDecoderStream;\n\n    // Streaming API.\n    iconv.encodeStream = function encodeStream(encoding, options) {\n        return new iconv.IconvLiteEncoderStream(iconv.getEncoder(encoding, options), options);\n    }\n\n    iconv.decodeStream = function decodeStream(encoding, options) {\n        return new iconv.IconvLiteDecoderStream(iconv.getDecoder(encoding, options), options);\n    }\n\n    iconv.supportsStreams = true;\n}\n\n// Enable Streaming API automatically if 'stream' module is available and non-empty (the majority of environments).\nvar stream_module;\ntry {\n    stream_module = require(\"stream\");\n} catch (e) {}\n\nif (stream_module && stream_module.Transform) {\n    iconv.enableStreamingAPI(stream_module);\n\n} else {\n    // In rare cases where 'stream' module is not available by default, throw a helpful exception.\n    iconv.encodeStream = iconv.decodeStream = function() {\n        throw new Error(\"iconv-lite Streaming API is not enabled. Use iconv.enableStreamingAPI(require('stream')); to enable it.\");\n    };\n}\n\nif (\"Ä\" != \"\\u0100\") {\n    console.error(\"iconv-lite warning: js files use non-utf8 encoding. See https://github.com/ashtuchkin/iconv-lite/wiki/Javascript-source-file-encodings for more info.\");\n}\n"]}}