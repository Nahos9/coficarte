{"code":"(()=>{\n\"use strict\";var __defProp=Object.defineProperty;var __name=(target,value)=>__defProp(target,\"name\",{value,configurable:true});const{Transform}=require(\"node:stream\");const{Console}=require(\"node:console\");const PERSISTENT=process.versions.icu?\"\\u2705\":\"Y \";const NOT_PERSISTENT=process.versions.icu?\"\\u274C\":\"N \";module.exports=class PendingInterceptorsFormatter{static{__name(this,\"PendingInterceptorsFormatter\")}constructor({disableColors}={}){this.transform=new Transform({transform(chunk,_enc,cb){cb(null,chunk)}});this.logger=new Console({stdout:this.transform,inspectOptions:{colors:!disableColors&&!process.env.CI}})}format(pendingInterceptors){const withPrettyHeaders=pendingInterceptors.map(({method,path,data:{statusCode},persist,times,timesInvoked,origin})=>({Method:method,Origin:origin,Path:path,\"Status code\":statusCode,Persistent:persist?PERSISTENT:NOT_PERSISTENT,Invocations:timesInvoked,Remaining:persist?Infinity:times-timesInvoked}));this.logger.table(withPrettyHeaders);return this.transform.read().toString()}};\n})()\n","warnings":[],"map":{"version":3,"mappings":";+HAEA,KAAM,CAAE,SAAU,EAAI,QAAQ,aAAa,EAC3C,KAAM,CAAE,OAAQ,EAAI,QAAQ,cAAc,EAE1C,MAAM,WAAa,QAAQ,SAAS,IAAM,SAAM,KAChD,MAAM,eAAiB,QAAQ,SAAS,IAAM,SAAM,KAKpD,OAAO,QAAU,MAAM,4BAA6B,CAXpD,MAWoD,6CAClD,YAAa,CAAE,aAAc,EAAI,CAAC,EAAG,CACnC,KAAK,UAAY,IAAI,UAAU,CAC7B,UAAW,MAAO,KAAM,GAAI,CAC1B,GAAG,KAAM,KAAK,CAChB,CACF,CAAC,EAED,KAAK,OAAS,IAAI,QAAQ,CACxB,OAAQ,KAAK,UACb,eAAgB,CACd,OAAQ,CAAC,eAAiB,CAAC,QAAQ,IAAI,EACzC,CACF,CAAC,CACH,CAEA,OAAQ,oBAAqB,CAC3B,MAAM,kBAAoB,oBAAoB,IAC5C,CAAC,CAAE,OAAQ,KAAM,KAAM,CAAE,UAAW,EAAG,QAAS,MAAO,aAAc,MAAO,KAAO,CACjF,OAAQ,OACR,OAAQ,OACR,KAAM,KACN,cAAe,WACf,WAAY,QAAU,WAAa,eACnC,YAAa,aACb,UAAW,QAAU,SAAW,MAAQ,YAC1C,EAAE,EAEJ,KAAK,OAAO,MAAM,iBAAiB,EACnC,OAAO,KAAK,UAAU,KAAK,EAAE,SAAS,CACxC,CACF","names":[],"sources":["/home/creditga/CofiCarte/node_modules/.pnpm/undici@6.21.0/node_modules/undici/lib/mock/pending-interceptors-formatter.js"],"sourcesContent":["'use strict'\n\nconst { Transform } = require('node:stream')\nconst { Console } = require('node:console')\n\nconst PERSISTENT = process.versions.icu ? '✅' : 'Y '\nconst NOT_PERSISTENT = process.versions.icu ? '❌' : 'N '\n\n/**\n * Gets the output of `console.table(…)` as a string.\n */\nmodule.exports = class PendingInterceptorsFormatter {\n  constructor ({ disableColors } = {}) {\n    this.transform = new Transform({\n      transform (chunk, _enc, cb) {\n        cb(null, chunk)\n      }\n    })\n\n    this.logger = new Console({\n      stdout: this.transform,\n      inspectOptions: {\n        colors: !disableColors && !process.env.CI\n      }\n    })\n  }\n\n  format (pendingInterceptors) {\n    const withPrettyHeaders = pendingInterceptors.map(\n      ({ method, path, data: { statusCode }, persist, times, timesInvoked, origin }) => ({\n        Method: method,\n        Origin: origin,\n        Path: path,\n        'Status code': statusCode,\n        Persistent: persist ? PERSISTENT : NOT_PERSISTENT,\n        Invocations: timesInvoked,\n        Remaining: persist ? Infinity : times - timesInvoked\n      }))\n\n    this.logger.table(withPrettyHeaders)\n    return this.transform.read().toString()\n  }\n}\n"]}}