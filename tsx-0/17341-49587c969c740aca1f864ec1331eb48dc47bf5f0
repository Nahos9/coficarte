{"code":"(()=>{\n\"use strict\";const diagnosticsChannel=require(\"node:diagnostics_channel\");const util=require(\"node:util\");const undiciDebugLog=util.debuglog(\"undici\");const fetchDebuglog=util.debuglog(\"fetch\");const websocketDebuglog=util.debuglog(\"websocket\");let isClientSet=false;const channels={beforeConnect:diagnosticsChannel.channel(\"undici:client:beforeConnect\"),connected:diagnosticsChannel.channel(\"undici:client:connected\"),connectError:diagnosticsChannel.channel(\"undici:client:connectError\"),sendHeaders:diagnosticsChannel.channel(\"undici:client:sendHeaders\"),create:diagnosticsChannel.channel(\"undici:request:create\"),bodySent:diagnosticsChannel.channel(\"undici:request:bodySent\"),headers:diagnosticsChannel.channel(\"undici:request:headers\"),trailers:diagnosticsChannel.channel(\"undici:request:trailers\"),error:diagnosticsChannel.channel(\"undici:request:error\"),open:diagnosticsChannel.channel(\"undici:websocket:open\"),close:diagnosticsChannel.channel(\"undici:websocket:close\"),socketError:diagnosticsChannel.channel(\"undici:websocket:socket_error\"),ping:diagnosticsChannel.channel(\"undici:websocket:ping\"),pong:diagnosticsChannel.channel(\"undici:websocket:pong\")};if(undiciDebugLog.enabled||fetchDebuglog.enabled){const debuglog=fetchDebuglog.enabled?fetchDebuglog:undiciDebugLog;diagnosticsChannel.channel(\"undici:client:beforeConnect\").subscribe(evt=>{const{connectParams:{version,protocol,port,host}}=evt;debuglog(\"connecting to %s using %s%s\",`${host}${port?`:${port}`:\"\"}`,protocol,version)});diagnosticsChannel.channel(\"undici:client:connected\").subscribe(evt=>{const{connectParams:{version,protocol,port,host}}=evt;debuglog(\"connected to %s using %s%s\",`${host}${port?`:${port}`:\"\"}`,protocol,version)});diagnosticsChannel.channel(\"undici:client:connectError\").subscribe(evt=>{const{connectParams:{version,protocol,port,host},error}=evt;debuglog(\"connection to %s using %s%s errored - %s\",`${host}${port?`:${port}`:\"\"}`,protocol,version,error.message)});diagnosticsChannel.channel(\"undici:client:sendHeaders\").subscribe(evt=>{const{request:{method,path,origin}}=evt;debuglog(\"sending request to %s %s/%s\",method,origin,path)});diagnosticsChannel.channel(\"undici:request:headers\").subscribe(evt=>{const{request:{method,path,origin},response:{statusCode}}=evt;debuglog(\"received response to %s %s/%s - HTTP %d\",method,origin,path,statusCode)});diagnosticsChannel.channel(\"undici:request:trailers\").subscribe(evt=>{const{request:{method,path,origin}}=evt;debuglog(\"trailers received from %s %s/%s\",method,origin,path)});diagnosticsChannel.channel(\"undici:request:error\").subscribe(evt=>{const{request:{method,path,origin},error}=evt;debuglog(\"request to %s %s/%s errored - %s\",method,origin,path,error.message)});isClientSet=true}if(websocketDebuglog.enabled){if(!isClientSet){const debuglog=undiciDebugLog.enabled?undiciDebugLog:websocketDebuglog;diagnosticsChannel.channel(\"undici:client:beforeConnect\").subscribe(evt=>{const{connectParams:{version,protocol,port,host}}=evt;debuglog(\"connecting to %s%s using %s%s\",host,port?`:${port}`:\"\",protocol,version)});diagnosticsChannel.channel(\"undici:client:connected\").subscribe(evt=>{const{connectParams:{version,protocol,port,host}}=evt;debuglog(\"connected to %s%s using %s%s\",host,port?`:${port}`:\"\",protocol,version)});diagnosticsChannel.channel(\"undici:client:connectError\").subscribe(evt=>{const{connectParams:{version,protocol,port,host},error}=evt;debuglog(\"connection to %s%s using %s%s errored - %s\",host,port?`:${port}`:\"\",protocol,version,error.message)});diagnosticsChannel.channel(\"undici:client:sendHeaders\").subscribe(evt=>{const{request:{method,path,origin}}=evt;debuglog(\"sending request to %s %s/%s\",method,origin,path)})}diagnosticsChannel.channel(\"undici:websocket:open\").subscribe(evt=>{const{address:{address,port}}=evt;websocketDebuglog(\"connection opened %s%s\",address,port?`:${port}`:\"\")});diagnosticsChannel.channel(\"undici:websocket:close\").subscribe(evt=>{const{websocket,code,reason}=evt;websocketDebuglog(\"closed connection to %s - %s %s\",websocket.url,code,reason)});diagnosticsChannel.channel(\"undici:websocket:socket_error\").subscribe(err=>{websocketDebuglog(\"connection errored - %s\",err.message)});diagnosticsChannel.channel(\"undici:websocket:ping\").subscribe(evt=>{websocketDebuglog(\"ping received\")});diagnosticsChannel.channel(\"undici:websocket:pong\").subscribe(evt=>{websocketDebuglog(\"pong received\")})}module.exports={channels};\n})()\n","warnings":[],"map":{"version":3,"mappings":"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","names":[],"sources":["/home/creditga/CofiCarte/node_modules/.pnpm/undici@6.21.0/node_modules/undici/lib/core/diagnostics.js"],"sourcesContent":["'use strict'\nconst diagnosticsChannel = require('node:diagnostics_channel')\nconst util = require('node:util')\n\nconst undiciDebugLog = util.debuglog('undici')\nconst fetchDebuglog = util.debuglog('fetch')\nconst websocketDebuglog = util.debuglog('websocket')\nlet isClientSet = false\nconst channels = {\n  // Client\n  beforeConnect: diagnosticsChannel.channel('undici:client:beforeConnect'),\n  connected: diagnosticsChannel.channel('undici:client:connected'),\n  connectError: diagnosticsChannel.channel('undici:client:connectError'),\n  sendHeaders: diagnosticsChannel.channel('undici:client:sendHeaders'),\n  // Request\n  create: diagnosticsChannel.channel('undici:request:create'),\n  bodySent: diagnosticsChannel.channel('undici:request:bodySent'),\n  headers: diagnosticsChannel.channel('undici:request:headers'),\n  trailers: diagnosticsChannel.channel('undici:request:trailers'),\n  error: diagnosticsChannel.channel('undici:request:error'),\n  // WebSocket\n  open: diagnosticsChannel.channel('undici:websocket:open'),\n  close: diagnosticsChannel.channel('undici:websocket:close'),\n  socketError: diagnosticsChannel.channel('undici:websocket:socket_error'),\n  ping: diagnosticsChannel.channel('undici:websocket:ping'),\n  pong: diagnosticsChannel.channel('undici:websocket:pong')\n}\n\nif (undiciDebugLog.enabled || fetchDebuglog.enabled) {\n  const debuglog = fetchDebuglog.enabled ? fetchDebuglog : undiciDebugLog\n\n  // Track all Client events\n  diagnosticsChannel.channel('undici:client:beforeConnect').subscribe(evt => {\n    const {\n      connectParams: { version, protocol, port, host }\n    } = evt\n    debuglog(\n      'connecting to %s using %s%s',\n      `${host}${port ? `:${port}` : ''}`,\n      protocol,\n      version\n    )\n  })\n\n  diagnosticsChannel.channel('undici:client:connected').subscribe(evt => {\n    const {\n      connectParams: { version, protocol, port, host }\n    } = evt\n    debuglog(\n      'connected to %s using %s%s',\n      `${host}${port ? `:${port}` : ''}`,\n      protocol,\n      version\n    )\n  })\n\n  diagnosticsChannel.channel('undici:client:connectError').subscribe(evt => {\n    const {\n      connectParams: { version, protocol, port, host },\n      error\n    } = evt\n    debuglog(\n      'connection to %s using %s%s errored - %s',\n      `${host}${port ? `:${port}` : ''}`,\n      protocol,\n      version,\n      error.message\n    )\n  })\n\n  diagnosticsChannel.channel('undici:client:sendHeaders').subscribe(evt => {\n    const {\n      request: { method, path, origin }\n    } = evt\n    debuglog('sending request to %s %s/%s', method, origin, path)\n  })\n\n  // Track Request events\n  diagnosticsChannel.channel('undici:request:headers').subscribe(evt => {\n    const {\n      request: { method, path, origin },\n      response: { statusCode }\n    } = evt\n    debuglog(\n      'received response to %s %s/%s - HTTP %d',\n      method,\n      origin,\n      path,\n      statusCode\n    )\n  })\n\n  diagnosticsChannel.channel('undici:request:trailers').subscribe(evt => {\n    const {\n      request: { method, path, origin }\n    } = evt\n    debuglog('trailers received from %s %s/%s', method, origin, path)\n  })\n\n  diagnosticsChannel.channel('undici:request:error').subscribe(evt => {\n    const {\n      request: { method, path, origin },\n      error\n    } = evt\n    debuglog(\n      'request to %s %s/%s errored - %s',\n      method,\n      origin,\n      path,\n      error.message\n    )\n  })\n\n  isClientSet = true\n}\n\nif (websocketDebuglog.enabled) {\n  if (!isClientSet) {\n    const debuglog = undiciDebugLog.enabled ? undiciDebugLog : websocketDebuglog\n    diagnosticsChannel.channel('undici:client:beforeConnect').subscribe(evt => {\n      const {\n        connectParams: { version, protocol, port, host }\n      } = evt\n      debuglog(\n        'connecting to %s%s using %s%s',\n        host,\n        port ? `:${port}` : '',\n        protocol,\n        version\n      )\n    })\n\n    diagnosticsChannel.channel('undici:client:connected').subscribe(evt => {\n      const {\n        connectParams: { version, protocol, port, host }\n      } = evt\n      debuglog(\n        'connected to %s%s using %s%s',\n        host,\n        port ? `:${port}` : '',\n        protocol,\n        version\n      )\n    })\n\n    diagnosticsChannel.channel('undici:client:connectError').subscribe(evt => {\n      const {\n        connectParams: { version, protocol, port, host },\n        error\n      } = evt\n      debuglog(\n        'connection to %s%s using %s%s errored - %s',\n        host,\n        port ? `:${port}` : '',\n        protocol,\n        version,\n        error.message\n      )\n    })\n\n    diagnosticsChannel.channel('undici:client:sendHeaders').subscribe(evt => {\n      const {\n        request: { method, path, origin }\n      } = evt\n      debuglog('sending request to %s %s/%s', method, origin, path)\n    })\n  }\n\n  // Track all WebSocket events\n  diagnosticsChannel.channel('undici:websocket:open').subscribe(evt => {\n    const {\n      address: { address, port }\n    } = evt\n    websocketDebuglog('connection opened %s%s', address, port ? `:${port}` : '')\n  })\n\n  diagnosticsChannel.channel('undici:websocket:close').subscribe(evt => {\n    const { websocket, code, reason } = evt\n    websocketDebuglog(\n      'closed connection to %s - %s %s',\n      websocket.url,\n      code,\n      reason\n    )\n  })\n\n  diagnosticsChannel.channel('undici:websocket:socket_error').subscribe(err => {\n    websocketDebuglog('connection errored - %s', err.message)\n  })\n\n  diagnosticsChannel.channel('undici:websocket:ping').subscribe(evt => {\n    websocketDebuglog('ping received')\n  })\n\n  diagnosticsChannel.channel('undici:websocket:pong').subscribe(evt => {\n    websocketDebuglog('pong received')\n  })\n}\n\nmodule.exports = {\n  channels\n}\n"]}}