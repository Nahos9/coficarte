{"code":"(()=>{\n\"use strict\";var __defProp=Object.defineProperty;var __name=(target,value)=>__defProp(target,\"name\",{value,configurable:true});var Buffer2=require(\"safer-buffer\").Buffer;module.exports=function(stream_module){var Transform=stream_module.Transform;function IconvLiteEncoderStream(conv,options){this.conv=conv;options=options||{};options.decodeStrings=false;Transform.call(this,options)}__name(IconvLiteEncoderStream,\"IconvLiteEncoderStream\");IconvLiteEncoderStream.prototype=Object.create(Transform.prototype,{constructor:{value:IconvLiteEncoderStream}});IconvLiteEncoderStream.prototype._transform=function(chunk,encoding,done){if(typeof chunk!=\"string\")return done(new Error(\"Iconv encoding stream needs strings as its input.\"));try{var res=this.conv.write(chunk);if(res&&res.length)this.push(res);done()}catch(e){done(e)}};IconvLiteEncoderStream.prototype._flush=function(done){try{var res=this.conv.end();if(res&&res.length)this.push(res);done()}catch(e){done(e)}};IconvLiteEncoderStream.prototype.collect=function(cb){var chunks=[];this.on(\"error\",cb);this.on(\"data\",function(chunk){chunks.push(chunk)});this.on(\"end\",function(){cb(null,Buffer2.concat(chunks))});return this};function IconvLiteDecoderStream(conv,options){this.conv=conv;options=options||{};options.encoding=this.encoding=\"utf8\";Transform.call(this,options)}__name(IconvLiteDecoderStream,\"IconvLiteDecoderStream\");IconvLiteDecoderStream.prototype=Object.create(Transform.prototype,{constructor:{value:IconvLiteDecoderStream}});IconvLiteDecoderStream.prototype._transform=function(chunk,encoding,done){if(!Buffer2.isBuffer(chunk)&&!(chunk instanceof Uint8Array))return done(new Error(\"Iconv decoding stream needs buffers as its input.\"));try{var res=this.conv.write(chunk);if(res&&res.length)this.push(res,this.encoding);done()}catch(e){done(e)}};IconvLiteDecoderStream.prototype._flush=function(done){try{var res=this.conv.end();if(res&&res.length)this.push(res,this.encoding);done()}catch(e){done(e)}};IconvLiteDecoderStream.prototype.collect=function(cb){var res=\"\";this.on(\"error\",cb);this.on(\"data\",function(chunk){res+=chunk});this.on(\"end\",function(){cb(null,res)});return this};return{IconvLiteEncoderStream,IconvLiteDecoderStream}};\n})()\n","warnings":[],"map":{"version":3,"mappings":";+HAEA,IAAIA,QAAS,QAAQ,cAAc,EAAE,OAIrC,OAAO,QAAU,SAAS,cAAe,CACrC,IAAI,UAAY,cAAc,UAI9B,SAAS,uBAAuB,KAAM,QAAS,CAC3C,KAAK,KAAO,KACZ,QAAU,SAAW,CAAC,EACtB,QAAQ,cAAgB,MACxB,UAAU,KAAK,KAAM,OAAO,CAChC,CALS,wDAOT,uBAAuB,UAAY,OAAO,OAAO,UAAU,UAAW,CAClE,YAAa,CAAE,MAAO,sBAAuB,CACjD,CAAC,EAED,uBAAuB,UAAU,WAAa,SAAS,MAAO,SAAU,KAAM,CAC1E,GAAI,OAAO,OAAS,SAChB,OAAO,KAAK,IAAI,MAAM,mDAAmD,CAAC,EAC9E,GAAI,CACA,IAAI,IAAM,KAAK,KAAK,MAAM,KAAK,EAC/B,GAAI,KAAO,IAAI,OAAQ,KAAK,KAAK,GAAG,EACpC,KAAK,CACT,OACO,EAAG,CACN,KAAK,CAAC,CACV,CACJ,EAEA,uBAAuB,UAAU,OAAS,SAAS,KAAM,CACrD,GAAI,CACA,IAAI,IAAM,KAAK,KAAK,IAAI,EACxB,GAAI,KAAO,IAAI,OAAQ,KAAK,KAAK,GAAG,EACpC,KAAK,CACT,OACO,EAAG,CACN,KAAK,CAAC,CACV,CACJ,EAEA,uBAAuB,UAAU,QAAU,SAAS,GAAI,CACpD,IAAI,OAAS,CAAC,EACd,KAAK,GAAG,QAAS,EAAE,EACnB,KAAK,GAAG,OAAQ,SAAS,MAAO,CAAE,OAAO,KAAK,KAAK,CAAG,CAAC,EACvD,KAAK,GAAG,MAAO,UAAW,CACtB,GAAG,KAAMA,QAAO,OAAO,MAAM,CAAC,CAClC,CAAC,EACD,OAAO,IACX,EAKA,SAAS,uBAAuB,KAAM,QAAS,CAC3C,KAAK,KAAO,KACZ,QAAU,SAAW,CAAC,EACtB,QAAQ,SAAW,KAAK,SAAW,OACnC,UAAU,KAAK,KAAM,OAAO,CAChC,CALS,wDAOT,uBAAuB,UAAY,OAAO,OAAO,UAAU,UAAW,CAClE,YAAa,CAAE,MAAO,sBAAuB,CACjD,CAAC,EAED,uBAAuB,UAAU,WAAa,SAAS,MAAO,SAAU,KAAM,CAC1E,GAAI,CAACA,QAAO,SAAS,KAAK,GAAK,EAAE,iBAAiB,YAC9C,OAAO,KAAK,IAAI,MAAM,mDAAmD,CAAC,EAC9E,GAAI,CACA,IAAI,IAAM,KAAK,KAAK,MAAM,KAAK,EAC/B,GAAI,KAAO,IAAI,OAAQ,KAAK,KAAK,IAAK,KAAK,QAAQ,EACnD,KAAK,CACT,OACO,EAAG,CACN,KAAK,CAAC,CACV,CACJ,EAEA,uBAAuB,UAAU,OAAS,SAAS,KAAM,CACrD,GAAI,CACA,IAAI,IAAM,KAAK,KAAK,IAAI,EACxB,GAAI,KAAO,IAAI,OAAQ,KAAK,KAAK,IAAK,KAAK,QAAQ,EACnD,KAAK,CACT,OACO,EAAG,CACN,KAAK,CAAC,CACV,CACJ,EAEA,uBAAuB,UAAU,QAAU,SAAS,GAAI,CACpD,IAAI,IAAM,GACV,KAAK,GAAG,QAAS,EAAE,EACnB,KAAK,GAAG,OAAQ,SAAS,MAAO,CAAE,KAAO,KAAO,CAAC,EACjD,KAAK,GAAG,MAAO,UAAW,CACtB,GAAG,KAAM,GAAG,CAChB,CAAC,EACD,OAAO,IACX,EAEA,MAAO,CACH,uBACA,sBACJ,CACJ","names":["Buffer"],"sources":["/home/creditga/CofiCarte/node_modules/.pnpm/iconv-lite@0.6.3/node_modules/iconv-lite/lib/streams.js"],"sourcesContent":["\"use strict\";\n\nvar Buffer = require(\"safer-buffer\").Buffer;\n\n// NOTE: Due to 'stream' module being pretty large (~100Kb, significant in browser environments), \n// we opt to dependency-inject it instead of creating a hard dependency.\nmodule.exports = function(stream_module) {\n    var Transform = stream_module.Transform;\n\n    // == Encoder stream =======================================================\n\n    function IconvLiteEncoderStream(conv, options) {\n        this.conv = conv;\n        options = options || {};\n        options.decodeStrings = false; // We accept only strings, so we don't need to decode them.\n        Transform.call(this, options);\n    }\n\n    IconvLiteEncoderStream.prototype = Object.create(Transform.prototype, {\n        constructor: { value: IconvLiteEncoderStream }\n    });\n\n    IconvLiteEncoderStream.prototype._transform = function(chunk, encoding, done) {\n        if (typeof chunk != 'string')\n            return done(new Error(\"Iconv encoding stream needs strings as its input.\"));\n        try {\n            var res = this.conv.write(chunk);\n            if (res && res.length) this.push(res);\n            done();\n        }\n        catch (e) {\n            done(e);\n        }\n    }\n\n    IconvLiteEncoderStream.prototype._flush = function(done) {\n        try {\n            var res = this.conv.end();\n            if (res && res.length) this.push(res);\n            done();\n        }\n        catch (e) {\n            done(e);\n        }\n    }\n\n    IconvLiteEncoderStream.prototype.collect = function(cb) {\n        var chunks = [];\n        this.on('error', cb);\n        this.on('data', function(chunk) { chunks.push(chunk); });\n        this.on('end', function() {\n            cb(null, Buffer.concat(chunks));\n        });\n        return this;\n    }\n\n\n    // == Decoder stream =======================================================\n\n    function IconvLiteDecoderStream(conv, options) {\n        this.conv = conv;\n        options = options || {};\n        options.encoding = this.encoding = 'utf8'; // We output strings.\n        Transform.call(this, options);\n    }\n\n    IconvLiteDecoderStream.prototype = Object.create(Transform.prototype, {\n        constructor: { value: IconvLiteDecoderStream }\n    });\n\n    IconvLiteDecoderStream.prototype._transform = function(chunk, encoding, done) {\n        if (!Buffer.isBuffer(chunk) && !(chunk instanceof Uint8Array))\n            return done(new Error(\"Iconv decoding stream needs buffers as its input.\"));\n        try {\n            var res = this.conv.write(chunk);\n            if (res && res.length) this.push(res, this.encoding);\n            done();\n        }\n        catch (e) {\n            done(e);\n        }\n    }\n\n    IconvLiteDecoderStream.prototype._flush = function(done) {\n        try {\n            var res = this.conv.end();\n            if (res && res.length) this.push(res, this.encoding);                \n            done();\n        }\n        catch (e) {\n            done(e);\n        }\n    }\n\n    IconvLiteDecoderStream.prototype.collect = function(cb) {\n        var res = '';\n        this.on('error', cb);\n        this.on('data', function(chunk) { res += chunk; });\n        this.on('end', function() {\n            cb(null, res);\n        });\n        return this;\n    }\n\n    return {\n        IconvLiteEncoderStream: IconvLiteEncoderStream,\n        IconvLiteDecoderStream: IconvLiteDecoderStream,\n    };\n};\n"]}}