{"code":"(()=>{\n\"use strict\";var __defProp=Object.defineProperty;var __name=(target,value)=>__defProp(target,\"name\",{value,configurable:true});const{getResponseData,buildKey,addMockDispatch}=require(\"./mock-utils\");const{kDispatches,kDispatchKey,kDefaultHeaders,kDefaultTrailers,kContentLength,kMockDispatch}=require(\"./mock-symbols\");const{InvalidArgumentError}=require(\"../core/errors\");const{buildURL}=require(\"../core/util\");class MockScope{static{__name(this,\"MockScope\")}constructor(mockDispatch){this[kMockDispatch]=mockDispatch}delay(waitInMs){if(typeof waitInMs!==\"number\"||!Number.isInteger(waitInMs)||waitInMs<=0){throw new InvalidArgumentError(\"waitInMs must be a valid integer > 0\")}this[kMockDispatch].delay=waitInMs;return this}persist(){this[kMockDispatch].persist=true;return this}times(repeatTimes){if(typeof repeatTimes!==\"number\"||!Number.isInteger(repeatTimes)||repeatTimes<=0){throw new InvalidArgumentError(\"repeatTimes must be a valid integer > 0\")}this[kMockDispatch].times=repeatTimes;return this}}class MockInterceptor{static{__name(this,\"MockInterceptor\")}constructor(opts,mockDispatches){if(typeof opts!==\"object\"){throw new InvalidArgumentError(\"opts must be an object\")}if(typeof opts.path===\"undefined\"){throw new InvalidArgumentError(\"opts.path must be defined\")}if(typeof opts.method===\"undefined\"){opts.method=\"GET\"}if(typeof opts.path===\"string\"){if(opts.query){opts.path=buildURL(opts.path,opts.query)}else{const parsedURL=new URL(opts.path,\"data://\");opts.path=parsedURL.pathname+parsedURL.search}}if(typeof opts.method===\"string\"){opts.method=opts.method.toUpperCase()}this[kDispatchKey]=buildKey(opts);this[kDispatches]=mockDispatches;this[kDefaultHeaders]={};this[kDefaultTrailers]={};this[kContentLength]=false}createMockScopeDispatchData({statusCode,data,responseOptions}){const responseData=getResponseData(data);const contentLength=this[kContentLength]?{\"content-length\":responseData.length}:{};const headers={...this[kDefaultHeaders],...contentLength,...responseOptions.headers};const trailers={...this[kDefaultTrailers],...responseOptions.trailers};return{statusCode,data,headers,trailers}}validateReplyParameters(replyParameters){if(typeof replyParameters.statusCode===\"undefined\"){throw new InvalidArgumentError(\"statusCode must be defined\")}if(typeof replyParameters.responseOptions!==\"object\"||replyParameters.responseOptions===null){throw new InvalidArgumentError(\"responseOptions must be an object\")}}reply(replyOptionsCallbackOrStatusCode){if(typeof replyOptionsCallbackOrStatusCode===\"function\"){const wrappedDefaultsCallback=__name(opts=>{const resolvedData=replyOptionsCallbackOrStatusCode(opts);if(typeof resolvedData!==\"object\"||resolvedData===null){throw new InvalidArgumentError(\"reply options callback must return an object\")}const replyParameters2={data:\"\",responseOptions:{},...resolvedData};this.validateReplyParameters(replyParameters2);return{...this.createMockScopeDispatchData(replyParameters2)}},\"wrappedDefaultsCallback\");const newMockDispatch2=addMockDispatch(this[kDispatches],this[kDispatchKey],wrappedDefaultsCallback);return new MockScope(newMockDispatch2)}const replyParameters={statusCode:replyOptionsCallbackOrStatusCode,data:arguments[1]===void 0?\"\":arguments[1],responseOptions:arguments[2]===void 0?{}:arguments[2]};this.validateReplyParameters(replyParameters);const dispatchData=this.createMockScopeDispatchData(replyParameters);const newMockDispatch=addMockDispatch(this[kDispatches],this[kDispatchKey],dispatchData);return new MockScope(newMockDispatch)}replyWithError(error){if(typeof error===\"undefined\"){throw new InvalidArgumentError(\"error must be defined\")}const newMockDispatch=addMockDispatch(this[kDispatches],this[kDispatchKey],{error});return new MockScope(newMockDispatch)}defaultReplyHeaders(headers){if(typeof headers===\"undefined\"){throw new InvalidArgumentError(\"headers must be defined\")}this[kDefaultHeaders]=headers;return this}defaultReplyTrailers(trailers){if(typeof trailers===\"undefined\"){throw new InvalidArgumentError(\"trailers must be defined\")}this[kDefaultTrailers]=trailers;return this}replyContentLength(){this[kContentLength]=true;return this}}module.exports.MockInterceptor=MockInterceptor;module.exports.MockScope=MockScope;\n})()\n","warnings":[],"map":{"version":3,"mappings":";+HAEA,KAAM,CAAE,gBAAiB,SAAU,eAAgB,EAAI,QAAQ,cAAc,EAC7E,KAAM,CACJ,YACA,aACA,gBACA,iBACA,eACA,aACF,EAAI,QAAQ,gBAAgB,EAC5B,KAAM,CAAE,oBAAqB,EAAI,QAAQ,gBAAgB,EACzD,KAAM,CAAE,QAAS,EAAI,QAAQ,cAAc,EAK3C,MAAM,SAAU,CAjBhB,MAiBgB,0BACd,YAAa,aAAc,CACzB,KAAK,aAAa,EAAI,YACxB,CAKA,MAAO,SAAU,CACf,GAAI,OAAO,WAAa,UAAY,CAAC,OAAO,UAAU,QAAQ,GAAK,UAAY,EAAG,CAChF,MAAM,IAAI,qBAAqB,sCAAsC,CACvE,CAEA,KAAK,aAAa,EAAE,MAAQ,SAC5B,OAAO,IACT,CAKA,SAAW,CACT,KAAK,aAAa,EAAE,QAAU,KAC9B,OAAO,IACT,CAKA,MAAO,YAAa,CAClB,GAAI,OAAO,cAAgB,UAAY,CAAC,OAAO,UAAU,WAAW,GAAK,aAAe,EAAG,CACzF,MAAM,IAAI,qBAAqB,yCAAyC,CAC1E,CAEA,KAAK,aAAa,EAAE,MAAQ,YAC5B,OAAO,IACT,CACF,CAKA,MAAM,eAAgB,CA1DtB,MA0DsB,gCACpB,YAAa,KAAM,eAAgB,CACjC,GAAI,OAAO,OAAS,SAAU,CAC5B,MAAM,IAAI,qBAAqB,wBAAwB,CACzD,CACA,GAAI,OAAO,KAAK,OAAS,YAAa,CACpC,MAAM,IAAI,qBAAqB,2BAA2B,CAC5D,CACA,GAAI,OAAO,KAAK,SAAW,YAAa,CACtC,KAAK,OAAS,KAChB,CAIA,GAAI,OAAO,KAAK,OAAS,SAAU,CACjC,GAAI,KAAK,MAAO,CACd,KAAK,KAAO,SAAS,KAAK,KAAM,KAAK,KAAK,CAC5C,KAAO,CAEL,MAAM,UAAY,IAAI,IAAI,KAAK,KAAM,SAAS,EAC9C,KAAK,KAAO,UAAU,SAAW,UAAU,MAC7C,CACF,CACA,GAAI,OAAO,KAAK,SAAW,SAAU,CACnC,KAAK,OAAS,KAAK,OAAO,YAAY,CACxC,CAEA,KAAK,YAAY,EAAI,SAAS,IAAI,EAClC,KAAK,WAAW,EAAI,eACpB,KAAK,eAAe,EAAI,CAAC,EACzB,KAAK,gBAAgB,EAAI,CAAC,EAC1B,KAAK,cAAc,EAAI,KACzB,CAEA,4BAA6B,CAAE,WAAY,KAAM,eAAgB,EAAG,CAClE,MAAM,aAAe,gBAAgB,IAAI,EACzC,MAAM,cAAgB,KAAK,cAAc,EAAI,CAAE,iBAAkB,aAAa,MAAO,EAAI,CAAC,EAC1F,MAAM,QAAU,CAAE,GAAG,KAAK,eAAe,EAAG,GAAG,cAAe,GAAG,gBAAgB,OAAQ,EACzF,MAAM,SAAW,CAAE,GAAG,KAAK,gBAAgB,EAAG,GAAG,gBAAgB,QAAS,EAE1E,MAAO,CAAE,WAAY,KAAM,QAAS,QAAS,CAC/C,CAEA,wBAAyB,gBAAiB,CACxC,GAAI,OAAO,gBAAgB,aAAe,YAAa,CACrD,MAAM,IAAI,qBAAqB,4BAA4B,CAC7D,CACA,GAAI,OAAO,gBAAgB,kBAAoB,UAAY,gBAAgB,kBAAoB,KAAM,CACnG,MAAM,IAAI,qBAAqB,mCAAmC,CACpE,CACF,CAKA,MAAO,iCAAkC,CAGvC,GAAI,OAAO,mCAAqC,WAAY,CAI1D,MAAM,wBAA0B,OAAC,MAAS,CAExC,MAAM,aAAe,iCAAiC,IAAI,EAG1D,GAAI,OAAO,eAAiB,UAAY,eAAiB,KAAM,CAC7D,MAAM,IAAI,qBAAqB,8CAA8C,CAC/E,CAEA,MAAMA,iBAAkB,CAAE,KAAM,GAAI,gBAAiB,CAAC,EAAG,GAAG,YAAa,EACzE,KAAK,wBAAwBA,gBAAe,EAG5C,MAAO,CACL,GAAG,KAAK,4BAA4BA,gBAAe,CACrD,CACF,EAhBgC,2BAmBhC,MAAMC,iBAAkB,gBAAgB,KAAK,WAAW,EAAG,KAAK,YAAY,EAAG,uBAAuB,EACtG,OAAO,IAAI,UAAUA,gBAAe,CACtC,CAMA,MAAM,gBAAkB,CACtB,WAAY,iCACZ,KAAM,UAAU,CAAC,IAAM,OAAY,GAAK,UAAU,CAAC,EACnD,gBAAiB,UAAU,CAAC,IAAM,OAAY,CAAC,EAAI,UAAU,CAAC,CAChE,EACA,KAAK,wBAAwB,eAAe,EAG5C,MAAM,aAAe,KAAK,4BAA4B,eAAe,EACrE,MAAM,gBAAkB,gBAAgB,KAAK,WAAW,EAAG,KAAK,YAAY,EAAG,YAAY,EAC3F,OAAO,IAAI,UAAU,eAAe,CACtC,CAKA,eAAgB,MAAO,CACrB,GAAI,OAAO,QAAU,YAAa,CAChC,MAAM,IAAI,qBAAqB,uBAAuB,CACxD,CAEA,MAAM,gBAAkB,gBAAgB,KAAK,WAAW,EAAG,KAAK,YAAY,EAAG,CAAE,KAAM,CAAC,EACxF,OAAO,IAAI,UAAU,eAAe,CACtC,CAKA,oBAAqB,QAAS,CAC5B,GAAI,OAAO,UAAY,YAAa,CAClC,MAAM,IAAI,qBAAqB,yBAAyB,CAC1D,CAEA,KAAK,eAAe,EAAI,QACxB,OAAO,IACT,CAKA,qBAAsB,SAAU,CAC9B,GAAI,OAAO,WAAa,YAAa,CACnC,MAAM,IAAI,qBAAqB,0BAA0B,CAC3D,CAEA,KAAK,gBAAgB,EAAI,SACzB,OAAO,IACT,CAKA,oBAAsB,CACpB,KAAK,cAAc,EAAI,KACvB,OAAO,IACT,CACF,CAEA,OAAO,QAAQ,gBAAkB,gBACjC,OAAO,QAAQ,UAAY","names":["replyParameters","newMockDispatch"],"sources":["/home/creditga/CofiCarte/node_modules/.pnpm/undici@6.21.0/node_modules/undici/lib/mock/mock-interceptor.js"],"sourcesContent":["'use strict'\n\nconst { getResponseData, buildKey, addMockDispatch } = require('./mock-utils')\nconst {\n  kDispatches,\n  kDispatchKey,\n  kDefaultHeaders,\n  kDefaultTrailers,\n  kContentLength,\n  kMockDispatch\n} = require('./mock-symbols')\nconst { InvalidArgumentError } = require('../core/errors')\nconst { buildURL } = require('../core/util')\n\n/**\n * Defines the scope API for an interceptor reply\n */\nclass MockScope {\n  constructor (mockDispatch) {\n    this[kMockDispatch] = mockDispatch\n  }\n\n  /**\n   * Delay a reply by a set amount in ms.\n   */\n  delay (waitInMs) {\n    if (typeof waitInMs !== 'number' || !Number.isInteger(waitInMs) || waitInMs <= 0) {\n      throw new InvalidArgumentError('waitInMs must be a valid integer > 0')\n    }\n\n    this[kMockDispatch].delay = waitInMs\n    return this\n  }\n\n  /**\n   * For a defined reply, never mark as consumed.\n   */\n  persist () {\n    this[kMockDispatch].persist = true\n    return this\n  }\n\n  /**\n   * Allow one to define a reply for a set amount of matching requests.\n   */\n  times (repeatTimes) {\n    if (typeof repeatTimes !== 'number' || !Number.isInteger(repeatTimes) || repeatTimes <= 0) {\n      throw new InvalidArgumentError('repeatTimes must be a valid integer > 0')\n    }\n\n    this[kMockDispatch].times = repeatTimes\n    return this\n  }\n}\n\n/**\n * Defines an interceptor for a Mock\n */\nclass MockInterceptor {\n  constructor (opts, mockDispatches) {\n    if (typeof opts !== 'object') {\n      throw new InvalidArgumentError('opts must be an object')\n    }\n    if (typeof opts.path === 'undefined') {\n      throw new InvalidArgumentError('opts.path must be defined')\n    }\n    if (typeof opts.method === 'undefined') {\n      opts.method = 'GET'\n    }\n    // See https://github.com/nodejs/undici/issues/1245\n    // As per RFC 3986, clients are not supposed to send URI\n    // fragments to servers when they retrieve a document,\n    if (typeof opts.path === 'string') {\n      if (opts.query) {\n        opts.path = buildURL(opts.path, opts.query)\n      } else {\n        // Matches https://github.com/nodejs/undici/blob/main/lib/web/fetch/index.js#L1811\n        const parsedURL = new URL(opts.path, 'data://')\n        opts.path = parsedURL.pathname + parsedURL.search\n      }\n    }\n    if (typeof opts.method === 'string') {\n      opts.method = opts.method.toUpperCase()\n    }\n\n    this[kDispatchKey] = buildKey(opts)\n    this[kDispatches] = mockDispatches\n    this[kDefaultHeaders] = {}\n    this[kDefaultTrailers] = {}\n    this[kContentLength] = false\n  }\n\n  createMockScopeDispatchData ({ statusCode, data, responseOptions }) {\n    const responseData = getResponseData(data)\n    const contentLength = this[kContentLength] ? { 'content-length': responseData.length } : {}\n    const headers = { ...this[kDefaultHeaders], ...contentLength, ...responseOptions.headers }\n    const trailers = { ...this[kDefaultTrailers], ...responseOptions.trailers }\n\n    return { statusCode, data, headers, trailers }\n  }\n\n  validateReplyParameters (replyParameters) {\n    if (typeof replyParameters.statusCode === 'undefined') {\n      throw new InvalidArgumentError('statusCode must be defined')\n    }\n    if (typeof replyParameters.responseOptions !== 'object' || replyParameters.responseOptions === null) {\n      throw new InvalidArgumentError('responseOptions must be an object')\n    }\n  }\n\n  /**\n   * Mock an undici request with a defined reply.\n   */\n  reply (replyOptionsCallbackOrStatusCode) {\n    // Values of reply aren't available right now as they\n    // can only be available when the reply callback is invoked.\n    if (typeof replyOptionsCallbackOrStatusCode === 'function') {\n      // We'll first wrap the provided callback in another function,\n      // this function will properly resolve the data from the callback\n      // when invoked.\n      const wrappedDefaultsCallback = (opts) => {\n        // Our reply options callback contains the parameter for statusCode, data and options.\n        const resolvedData = replyOptionsCallbackOrStatusCode(opts)\n\n        // Check if it is in the right format\n        if (typeof resolvedData !== 'object' || resolvedData === null) {\n          throw new InvalidArgumentError('reply options callback must return an object')\n        }\n\n        const replyParameters = { data: '', responseOptions: {}, ...resolvedData }\n        this.validateReplyParameters(replyParameters)\n        // Since the values can be obtained immediately we return them\n        // from this higher order function that will be resolved later.\n        return {\n          ...this.createMockScopeDispatchData(replyParameters)\n        }\n      }\n\n      // Add usual dispatch data, but this time set the data parameter to function that will eventually provide data.\n      const newMockDispatch = addMockDispatch(this[kDispatches], this[kDispatchKey], wrappedDefaultsCallback)\n      return new MockScope(newMockDispatch)\n    }\n\n    // We can have either one or three parameters, if we get here,\n    // we should have 1-3 parameters. So we spread the arguments of\n    // this function to obtain the parameters, since replyData will always\n    // just be the statusCode.\n    const replyParameters = {\n      statusCode: replyOptionsCallbackOrStatusCode,\n      data: arguments[1] === undefined ? '' : arguments[1],\n      responseOptions: arguments[2] === undefined ? {} : arguments[2]\n    }\n    this.validateReplyParameters(replyParameters)\n\n    // Send in-already provided data like usual\n    const dispatchData = this.createMockScopeDispatchData(replyParameters)\n    const newMockDispatch = addMockDispatch(this[kDispatches], this[kDispatchKey], dispatchData)\n    return new MockScope(newMockDispatch)\n  }\n\n  /**\n   * Mock an undici request with a defined error.\n   */\n  replyWithError (error) {\n    if (typeof error === 'undefined') {\n      throw new InvalidArgumentError('error must be defined')\n    }\n\n    const newMockDispatch = addMockDispatch(this[kDispatches], this[kDispatchKey], { error })\n    return new MockScope(newMockDispatch)\n  }\n\n  /**\n   * Set default reply headers on the interceptor for subsequent replies\n   */\n  defaultReplyHeaders (headers) {\n    if (typeof headers === 'undefined') {\n      throw new InvalidArgumentError('headers must be defined')\n    }\n\n    this[kDefaultHeaders] = headers\n    return this\n  }\n\n  /**\n   * Set default reply trailers on the interceptor for subsequent replies\n   */\n  defaultReplyTrailers (trailers) {\n    if (typeof trailers === 'undefined') {\n      throw new InvalidArgumentError('trailers must be defined')\n    }\n\n    this[kDefaultTrailers] = trailers\n    return this\n  }\n\n  /**\n   * Set reply content length header for replies on the interceptor\n   */\n  replyContentLength () {\n    this[kContentLength] = true\n    return this\n  }\n}\n\nmodule.exports.MockInterceptor = MockInterceptor\nmodule.exports.MockScope = MockScope\n"]}}