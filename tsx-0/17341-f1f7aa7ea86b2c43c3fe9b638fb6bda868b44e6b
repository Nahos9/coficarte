{"code":"(()=>{\n\"use strict\";exports.removeLeadingAndTrailingHTTPWhitespace=string=>{return string.replace(/^[ \\t\\n\\r]+/u,\"\").replace(/[ \\t\\n\\r]+$/u,\"\")};exports.removeTrailingHTTPWhitespace=string=>{return string.replace(/[ \\t\\n\\r]+$/u,\"\")};exports.isHTTPWhitespaceChar=char=>{return char===\" \"||char===\"\t\"||char===\"\\n\"||char===\"\\r\"};exports.solelyContainsHTTPTokenCodePoints=string=>{return/^[-!#$%&'*+.^_`|~A-Za-z0-9]*$/u.test(string)};exports.soleyContainsHTTPQuotedStringTokenCodePoints=string=>{return/^[\\t\\u0020-\\u007E\\u0080-\\u00FF]*$/u.test(string)};exports.asciiLowercase=string=>{return string.replace(/[A-Z]/ug,l=>l.toLowerCase())};exports.collectAnHTTPQuotedString=(input,position)=>{let value=\"\";position++;while(true){while(position<input.length&&input[position]!=='\"'&&input[position]!==\"\\\\\"){value+=input[position];++position}if(position>=input.length){break}const quoteOrBackslash=input[position];++position;if(quoteOrBackslash===\"\\\\\"){if(position>=input.length){value+=\"\\\\\";break}value+=input[position];++position}else{break}}return[value,position]};\n})()\n","warnings":[],"map":{"version":3,"mappings":";aAEA,QAAQ,uCAAyC,QAAU,CACzD,OAAO,OAAO,QAAQ,eAAgB,EAAE,EAAE,QAAQ,eAAgB,EAAE,CACtE,EAEA,QAAQ,6BAA+B,QAAU,CAC/C,OAAO,OAAO,QAAQ,eAAgB,EAAE,CAC1C,EAEA,QAAQ,qBAAuB,MAAQ,CACrC,OAAO,OAAS,KAAO,OAAS,KAAQ,OAAS,MAAQ,OAAS,IACpE,EAEA,QAAQ,kCAAoC,QAAU,CACpD,MAAO,iCAAiC,KAAK,MAAM,CACrD,EAEA,QAAQ,6CAA+C,QAAU,CAC/D,MAAO,qCAAqC,KAAK,MAAM,CACzD,EAEA,QAAQ,eAAiB,QAAU,CACjC,OAAO,OAAO,QAAQ,UAAW,GAAK,EAAE,YAAY,CAAC,CACvD,EAGA,QAAQ,0BAA4B,CAAC,MAAO,WAAa,CACvD,IAAI,MAAQ,GAEZ,WAEA,MAAO,KAAM,CACX,MAAO,SAAW,MAAM,QAAU,MAAM,QAAQ,IAAM,KAAQ,MAAM,QAAQ,IAAM,KAAM,CACtF,OAAS,MAAM,QAAQ,EACvB,EAAE,QACJ,CAEA,GAAI,UAAY,MAAM,OAAQ,CAC5B,KACF,CAEA,MAAM,iBAAmB,MAAM,QAAQ,EACvC,EAAE,SAEF,GAAI,mBAAqB,KAAM,CAC7B,GAAI,UAAY,MAAM,OAAQ,CAC5B,OAAS,KACT,KACF,CAEA,OAAS,MAAM,QAAQ,EACvB,EAAE,QACJ,KAAO,CACL,KACF,CACF,CAEA,MAAO,CAAC,MAAO,QAAQ,CACzB","names":[],"sources":["/home/creditga/CofiCarte/node_modules/.pnpm/whatwg-mimetype@4.0.0/node_modules/whatwg-mimetype/lib/utils.js"],"sourcesContent":["\"use strict\";\n\nexports.removeLeadingAndTrailingHTTPWhitespace = string => {\n  return string.replace(/^[ \\t\\n\\r]+/u, \"\").replace(/[ \\t\\n\\r]+$/u, \"\");\n};\n\nexports.removeTrailingHTTPWhitespace = string => {\n  return string.replace(/[ \\t\\n\\r]+$/u, \"\");\n};\n\nexports.isHTTPWhitespaceChar = char => {\n  return char === \" \" || char === \"\\t\" || char === \"\\n\" || char === \"\\r\";\n};\n\nexports.solelyContainsHTTPTokenCodePoints = string => {\n  return /^[-!#$%&'*+.^_`|~A-Za-z0-9]*$/u.test(string);\n};\n\nexports.soleyContainsHTTPQuotedStringTokenCodePoints = string => {\n  return /^[\\t\\u0020-\\u007E\\u0080-\\u00FF]*$/u.test(string);\n};\n\nexports.asciiLowercase = string => {\n  return string.replace(/[A-Z]/ug, l => l.toLowerCase());\n};\n\n// This variant only implements it with the extract-value flag set.\nexports.collectAnHTTPQuotedString = (input, position) => {\n  let value = \"\";\n\n  position++;\n\n  while (true) {\n    while (position < input.length && input[position] !== \"\\\"\" && input[position] !== \"\\\\\") {\n      value += input[position];\n      ++position;\n    }\n\n    if (position >= input.length) {\n      break;\n    }\n\n    const quoteOrBackslash = input[position];\n    ++position;\n\n    if (quoteOrBackslash === \"\\\\\") {\n      if (position >= input.length) {\n        value += \"\\\\\";\n        break;\n      }\n\n      value += input[position];\n      ++position;\n    } else {\n      break;\n    }\n  }\n\n  return [value, position];\n};\n"]}}