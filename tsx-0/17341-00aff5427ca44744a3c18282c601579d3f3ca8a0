{"code":"(()=>{\n\"use strict\";const{removeLeadingAndTrailingHTTPWhitespace,removeTrailingHTTPWhitespace,isHTTPWhitespaceChar,solelyContainsHTTPTokenCodePoints,soleyContainsHTTPQuotedStringTokenCodePoints,asciiLowercase,collectAnHTTPQuotedString}=require(\"./utils.js\");module.exports=input=>{input=removeLeadingAndTrailingHTTPWhitespace(input);let position=0;let type=\"\";while(position<input.length&&input[position]!==\"/\"){type+=input[position];++position}if(type.length===0||!solelyContainsHTTPTokenCodePoints(type)){return null}if(position>=input.length){return null}++position;let subtype=\"\";while(position<input.length&&input[position]!==\";\"){subtype+=input[position];++position}subtype=removeTrailingHTTPWhitespace(subtype);if(subtype.length===0||!solelyContainsHTTPTokenCodePoints(subtype)){return null}const mimeType={type:asciiLowercase(type),subtype:asciiLowercase(subtype),parameters:new Map};while(position<input.length){++position;while(isHTTPWhitespaceChar(input[position])){++position}let parameterName=\"\";while(position<input.length&&input[position]!==\";\"&&input[position]!==\"=\"){parameterName+=input[position];++position}parameterName=asciiLowercase(parameterName);if(position<input.length){if(input[position]===\";\"){continue}++position}let parameterValue=null;if(input[position]==='\"'){[parameterValue,position]=collectAnHTTPQuotedString(input,position);while(position<input.length&&input[position]!==\";\"){++position}}else{parameterValue=\"\";while(position<input.length&&input[position]!==\";\"){parameterValue+=input[position];++position}parameterValue=removeTrailingHTTPWhitespace(parameterValue);if(parameterValue===\"\"){continue}}if(parameterName.length>0&&solelyContainsHTTPTokenCodePoints(parameterName)&&soleyContainsHTTPQuotedStringTokenCodePoints(parameterValue)&&!mimeType.parameters.has(parameterName)){mimeType.parameters.set(parameterName,parameterValue)}}return mimeType};\n})()\n","warnings":[],"map":{"version":3,"mappings":";aACA,KAAM,CACJ,uCACA,6BACA,qBACA,kCACA,6CACA,eACA,yBACF,EAAI,QAAQ,YAAY,EAExB,OAAO,QAAU,OAAS,CACxB,MAAQ,uCAAuC,KAAK,EAEpD,IAAI,SAAW,EACf,IAAI,KAAO,GACX,MAAO,SAAW,MAAM,QAAU,MAAM,QAAQ,IAAM,IAAK,CACzD,MAAQ,MAAM,QAAQ,EACtB,EAAE,QACJ,CAEA,GAAI,KAAK,SAAW,GAAK,CAAC,kCAAkC,IAAI,EAAG,CACjE,OAAO,IACT,CAEA,GAAI,UAAY,MAAM,OAAQ,CAC5B,OAAO,IACT,CAGA,EAAE,SAEF,IAAI,QAAU,GACd,MAAO,SAAW,MAAM,QAAU,MAAM,QAAQ,IAAM,IAAK,CACzD,SAAW,MAAM,QAAQ,EACzB,EAAE,QACJ,CAEA,QAAU,6BAA6B,OAAO,EAE9C,GAAI,QAAQ,SAAW,GAAK,CAAC,kCAAkC,OAAO,EAAG,CACvE,OAAO,IACT,CAEA,MAAM,SAAW,CACf,KAAM,eAAe,IAAI,EACzB,QAAS,eAAe,OAAO,EAC/B,WAAY,IAAI,GAClB,EAEA,MAAO,SAAW,MAAM,OAAQ,CAE9B,EAAE,SAEF,MAAO,qBAAqB,MAAM,QAAQ,CAAC,EAAG,CAC5C,EAAE,QACJ,CAEA,IAAI,cAAgB,GACpB,MAAO,SAAW,MAAM,QAAU,MAAM,QAAQ,IAAM,KAAO,MAAM,QAAQ,IAAM,IAAK,CACpF,eAAiB,MAAM,QAAQ,EAC/B,EAAE,QACJ,CACA,cAAgB,eAAe,aAAa,EAE5C,GAAI,SAAW,MAAM,OAAQ,CAC3B,GAAI,MAAM,QAAQ,IAAM,IAAK,CAC3B,QACF,CAGA,EAAE,QACJ,CAEA,IAAI,eAAiB,KACrB,GAAI,MAAM,QAAQ,IAAM,IAAM,CAC5B,CAAC,eAAgB,QAAQ,EAAI,0BAA0B,MAAO,QAAQ,EAEtE,MAAO,SAAW,MAAM,QAAU,MAAM,QAAQ,IAAM,IAAK,CACzD,EAAE,QACJ,CACF,KAAO,CACL,eAAiB,GACjB,MAAO,SAAW,MAAM,QAAU,MAAM,QAAQ,IAAM,IAAK,CACzD,gBAAkB,MAAM,QAAQ,EAChC,EAAE,QACJ,CAEA,eAAiB,6BAA6B,cAAc,EAE5D,GAAI,iBAAmB,GAAI,CACzB,QACF,CACF,CAEA,GAAI,cAAc,OAAS,GACvB,kCAAkC,aAAa,GAC/C,6CAA6C,cAAc,GAC3D,CAAC,SAAS,WAAW,IAAI,aAAa,EAAG,CAC3C,SAAS,WAAW,IAAI,cAAe,cAAc,CACvD,CACF,CAEA,OAAO,QACT","names":[],"sources":["/home/creditga/CofiCarte/node_modules/.pnpm/whatwg-mimetype@4.0.0/node_modules/whatwg-mimetype/lib/parser.js"],"sourcesContent":["\"use strict\";\nconst {\n  removeLeadingAndTrailingHTTPWhitespace,\n  removeTrailingHTTPWhitespace,\n  isHTTPWhitespaceChar,\n  solelyContainsHTTPTokenCodePoints,\n  soleyContainsHTTPQuotedStringTokenCodePoints,\n  asciiLowercase,\n  collectAnHTTPQuotedString\n} = require(\"./utils.js\");\n\nmodule.exports = input => {\n  input = removeLeadingAndTrailingHTTPWhitespace(input);\n\n  let position = 0;\n  let type = \"\";\n  while (position < input.length && input[position] !== \"/\") {\n    type += input[position];\n    ++position;\n  }\n\n  if (type.length === 0 || !solelyContainsHTTPTokenCodePoints(type)) {\n    return null;\n  }\n\n  if (position >= input.length) {\n    return null;\n  }\n\n  // Skips past \"/\"\n  ++position;\n\n  let subtype = \"\";\n  while (position < input.length && input[position] !== \";\") {\n    subtype += input[position];\n    ++position;\n  }\n\n  subtype = removeTrailingHTTPWhitespace(subtype);\n\n  if (subtype.length === 0 || !solelyContainsHTTPTokenCodePoints(subtype)) {\n    return null;\n  }\n\n  const mimeType = {\n    type: asciiLowercase(type),\n    subtype: asciiLowercase(subtype),\n    parameters: new Map()\n  };\n\n  while (position < input.length) {\n    // Skip past \";\"\n    ++position;\n\n    while (isHTTPWhitespaceChar(input[position])) {\n      ++position;\n    }\n\n    let parameterName = \"\";\n    while (position < input.length && input[position] !== \";\" && input[position] !== \"=\") {\n      parameterName += input[position];\n      ++position;\n    }\n    parameterName = asciiLowercase(parameterName);\n\n    if (position < input.length) {\n      if (input[position] === \";\") {\n        continue;\n      }\n\n      // Skip past \"=\"\n      ++position;\n    }\n\n    let parameterValue = null;\n    if (input[position] === \"\\\"\") {\n      [parameterValue, position] = collectAnHTTPQuotedString(input, position);\n\n      while (position < input.length && input[position] !== \";\") {\n        ++position;\n      }\n    } else {\n      parameterValue = \"\";\n      while (position < input.length && input[position] !== \";\") {\n        parameterValue += input[position];\n        ++position;\n      }\n\n      parameterValue = removeTrailingHTTPWhitespace(parameterValue);\n\n      if (parameterValue === \"\") {\n        continue;\n      }\n    }\n\n    if (parameterName.length > 0 &&\n        solelyContainsHTTPTokenCodePoints(parameterName) &&\n        soleyContainsHTTPQuotedStringTokenCodePoints(parameterValue) &&\n        !mimeType.parameters.has(parameterName)) {\n      mimeType.parameters.set(parameterName, parameterValue);\n    }\n  }\n\n  return mimeType;\n};\n"]}}