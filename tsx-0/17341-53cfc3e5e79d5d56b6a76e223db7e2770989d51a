{"code":"(()=>{\n\"use strict\";var __defProp=Object.defineProperty;var __name=(target,value)=>__defProp(target,\"name\",{value,configurable:true});const DispatcherBase=require(\"./dispatcher-base\");const{kClose,kDestroy,kClosed,kDestroyed,kDispatch,kNoProxyAgent,kHttpProxyAgent,kHttpsProxyAgent}=require(\"../core/symbols\");const ProxyAgent=require(\"./proxy-agent\");const Agent=require(\"./agent\");const DEFAULT_PORTS={\"http:\":80,\"https:\":443};let experimentalWarned=false;class EnvHttpProxyAgent extends DispatcherBase{static{__name(this,\"EnvHttpProxyAgent\")}#noProxyValue=null;#noProxyEntries=null;#opts=null;constructor(opts={}){super();this.#opts=opts;if(!experimentalWarned){experimentalWarned=true;process.emitWarning(\"EnvHttpProxyAgent is experimental, expect them to change at any time.\",{code:\"UNDICI-EHPA\"})}const{httpProxy,httpsProxy,noProxy,...agentOpts}=opts;this[kNoProxyAgent]=new Agent(agentOpts);const HTTP_PROXY=httpProxy??process.env.http_proxy??process.env.HTTP_PROXY;if(HTTP_PROXY){this[kHttpProxyAgent]=new ProxyAgent({...agentOpts,uri:HTTP_PROXY})}else{this[kHttpProxyAgent]=this[kNoProxyAgent]}const HTTPS_PROXY=httpsProxy??process.env.https_proxy??process.env.HTTPS_PROXY;if(HTTPS_PROXY){this[kHttpsProxyAgent]=new ProxyAgent({...agentOpts,uri:HTTPS_PROXY})}else{this[kHttpsProxyAgent]=this[kHttpProxyAgent]}this.#parseNoProxy()}[kDispatch](opts,handler){const url=new URL(opts.origin);const agent=this.#getProxyAgentForUrl(url);return agent.dispatch(opts,handler)}async[kClose](){await this[kNoProxyAgent].close();if(!this[kHttpProxyAgent][kClosed]){await this[kHttpProxyAgent].close()}if(!this[kHttpsProxyAgent][kClosed]){await this[kHttpsProxyAgent].close()}}async[kDestroy](err){await this[kNoProxyAgent].destroy(err);if(!this[kHttpProxyAgent][kDestroyed]){await this[kHttpProxyAgent].destroy(err)}if(!this[kHttpsProxyAgent][kDestroyed]){await this[kHttpsProxyAgent].destroy(err)}}#getProxyAgentForUrl(url){let{protocol,host:hostname,port}=url;hostname=hostname.replace(/:\\d*$/,\"\").toLowerCase();port=Number.parseInt(port,10)||DEFAULT_PORTS[protocol]||0;if(!this.#shouldProxy(hostname,port)){return this[kNoProxyAgent]}if(protocol===\"https:\"){return this[kHttpsProxyAgent]}return this[kHttpProxyAgent]}#shouldProxy(hostname,port){if(this.#noProxyChanged){this.#parseNoProxy()}if(this.#noProxyEntries.length===0){return true}if(this.#noProxyValue===\"*\"){return false}for(let i=0;i<this.#noProxyEntries.length;i++){const entry=this.#noProxyEntries[i];if(entry.port&&entry.port!==port){continue}if(!/^[.*]/.test(entry.hostname)){if(hostname===entry.hostname){return false}}else{if(hostname.endsWith(entry.hostname.replace(/^\\*/,\"\"))){return false}}}return true}#parseNoProxy(){const noProxyValue=this.#opts.noProxy??this.#noProxyEnv;const noProxySplit=noProxyValue.split(/[,\\s]/);const noProxyEntries=[];for(let i=0;i<noProxySplit.length;i++){const entry=noProxySplit[i];if(!entry){continue}const parsed=entry.match(/^(.+):(\\d+)$/);noProxyEntries.push({hostname:(parsed?parsed[1]:entry).toLowerCase(),port:parsed?Number.parseInt(parsed[2],10):0})}this.#noProxyValue=noProxyValue;this.#noProxyEntries=noProxyEntries}get#noProxyChanged(){if(this.#opts.noProxy!==void 0){return false}return this.#noProxyValue!==this.#noProxyEnv}get#noProxyEnv(){return process.env.no_proxy??process.env.NO_PROXY??\"\"}}module.exports=EnvHttpProxyAgent;\n})()\n","warnings":[],"map":{"version":3,"mappings":"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","names":[],"sources":["/home/creditga/CofiCarte/node_modules/.pnpm/undici@6.21.0/node_modules/undici/lib/dispatcher/env-http-proxy-agent.js"],"sourcesContent":["'use strict'\n\nconst DispatcherBase = require('./dispatcher-base')\nconst { kClose, kDestroy, kClosed, kDestroyed, kDispatch, kNoProxyAgent, kHttpProxyAgent, kHttpsProxyAgent } = require('../core/symbols')\nconst ProxyAgent = require('./proxy-agent')\nconst Agent = require('./agent')\n\nconst DEFAULT_PORTS = {\n  'http:': 80,\n  'https:': 443\n}\n\nlet experimentalWarned = false\n\nclass EnvHttpProxyAgent extends DispatcherBase {\n  #noProxyValue = null\n  #noProxyEntries = null\n  #opts = null\n\n  constructor (opts = {}) {\n    super()\n    this.#opts = opts\n\n    if (!experimentalWarned) {\n      experimentalWarned = true\n      process.emitWarning('EnvHttpProxyAgent is experimental, expect them to change at any time.', {\n        code: 'UNDICI-EHPA'\n      })\n    }\n\n    const { httpProxy, httpsProxy, noProxy, ...agentOpts } = opts\n\n    this[kNoProxyAgent] = new Agent(agentOpts)\n\n    const HTTP_PROXY = httpProxy ?? process.env.http_proxy ?? process.env.HTTP_PROXY\n    if (HTTP_PROXY) {\n      this[kHttpProxyAgent] = new ProxyAgent({ ...agentOpts, uri: HTTP_PROXY })\n    } else {\n      this[kHttpProxyAgent] = this[kNoProxyAgent]\n    }\n\n    const HTTPS_PROXY = httpsProxy ?? process.env.https_proxy ?? process.env.HTTPS_PROXY\n    if (HTTPS_PROXY) {\n      this[kHttpsProxyAgent] = new ProxyAgent({ ...agentOpts, uri: HTTPS_PROXY })\n    } else {\n      this[kHttpsProxyAgent] = this[kHttpProxyAgent]\n    }\n\n    this.#parseNoProxy()\n  }\n\n  [kDispatch] (opts, handler) {\n    const url = new URL(opts.origin)\n    const agent = this.#getProxyAgentForUrl(url)\n    return agent.dispatch(opts, handler)\n  }\n\n  async [kClose] () {\n    await this[kNoProxyAgent].close()\n    if (!this[kHttpProxyAgent][kClosed]) {\n      await this[kHttpProxyAgent].close()\n    }\n    if (!this[kHttpsProxyAgent][kClosed]) {\n      await this[kHttpsProxyAgent].close()\n    }\n  }\n\n  async [kDestroy] (err) {\n    await this[kNoProxyAgent].destroy(err)\n    if (!this[kHttpProxyAgent][kDestroyed]) {\n      await this[kHttpProxyAgent].destroy(err)\n    }\n    if (!this[kHttpsProxyAgent][kDestroyed]) {\n      await this[kHttpsProxyAgent].destroy(err)\n    }\n  }\n\n  #getProxyAgentForUrl (url) {\n    let { protocol, host: hostname, port } = url\n\n    // Stripping ports in this way instead of using parsedUrl.hostname to make\n    // sure that the brackets around IPv6 addresses are kept.\n    hostname = hostname.replace(/:\\d*$/, '').toLowerCase()\n    port = Number.parseInt(port, 10) || DEFAULT_PORTS[protocol] || 0\n    if (!this.#shouldProxy(hostname, port)) {\n      return this[kNoProxyAgent]\n    }\n    if (protocol === 'https:') {\n      return this[kHttpsProxyAgent]\n    }\n    return this[kHttpProxyAgent]\n  }\n\n  #shouldProxy (hostname, port) {\n    if (this.#noProxyChanged) {\n      this.#parseNoProxy()\n    }\n\n    if (this.#noProxyEntries.length === 0) {\n      return true // Always proxy if NO_PROXY is not set or empty.\n    }\n    if (this.#noProxyValue === '*') {\n      return false // Never proxy if wildcard is set.\n    }\n\n    for (let i = 0; i < this.#noProxyEntries.length; i++) {\n      const entry = this.#noProxyEntries[i]\n      if (entry.port && entry.port !== port) {\n        continue // Skip if ports don't match.\n      }\n      if (!/^[.*]/.test(entry.hostname)) {\n        // No wildcards, so don't proxy only if there is not an exact match.\n        if (hostname === entry.hostname) {\n          return false\n        }\n      } else {\n        // Don't proxy if the hostname ends with the no_proxy host.\n        if (hostname.endsWith(entry.hostname.replace(/^\\*/, ''))) {\n          return false\n        }\n      }\n    }\n\n    return true\n  }\n\n  #parseNoProxy () {\n    const noProxyValue = this.#opts.noProxy ?? this.#noProxyEnv\n    const noProxySplit = noProxyValue.split(/[,\\s]/)\n    const noProxyEntries = []\n\n    for (let i = 0; i < noProxySplit.length; i++) {\n      const entry = noProxySplit[i]\n      if (!entry) {\n        continue\n      }\n      const parsed = entry.match(/^(.+):(\\d+)$/)\n      noProxyEntries.push({\n        hostname: (parsed ? parsed[1] : entry).toLowerCase(),\n        port: parsed ? Number.parseInt(parsed[2], 10) : 0\n      })\n    }\n\n    this.#noProxyValue = noProxyValue\n    this.#noProxyEntries = noProxyEntries\n  }\n\n  get #noProxyChanged () {\n    if (this.#opts.noProxy !== undefined) {\n      return false\n    }\n    return this.#noProxyValue !== this.#noProxyEnv\n  }\n\n  get #noProxyEnv () {\n    return process.env.no_proxy ?? process.env.NO_PROXY ?? ''\n  }\n}\n\nmodule.exports = EnvHttpProxyAgent\n"]}}