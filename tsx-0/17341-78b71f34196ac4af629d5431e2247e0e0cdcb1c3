{"code":"(()=>{\n\"use strict\";var __defProp=Object.defineProperty;var __name=(target,value)=>__defProp(target,\"name\",{value,configurable:true});const{createInflateRaw,Z_DEFAULT_WINDOWBITS}=require(\"node:zlib\");const{isValidClientWindowBits}=require(\"./util\");const tail=Buffer.from([0,0,255,255]);const kBuffer=Symbol(\"kBuffer\");const kLength=Symbol(\"kLength\");class PerMessageDeflate{static{__name(this,\"PerMessageDeflate\")}#inflate;#options={};constructor(extensions){this.#options.serverNoContextTakeover=extensions.has(\"server_no_context_takeover\");this.#options.serverMaxWindowBits=extensions.get(\"server_max_window_bits\")}decompress(chunk,fin,callback){if(!this.#inflate){let windowBits=Z_DEFAULT_WINDOWBITS;if(this.#options.serverMaxWindowBits){if(!isValidClientWindowBits(this.#options.serverMaxWindowBits)){callback(new Error(\"Invalid server_max_window_bits\"));return}windowBits=Number.parseInt(this.#options.serverMaxWindowBits)}this.#inflate=createInflateRaw({windowBits});this.#inflate[kBuffer]=[];this.#inflate[kLength]=0;this.#inflate.on(\"data\",data=>{this.#inflate[kBuffer].push(data);this.#inflate[kLength]+=data.length});this.#inflate.on(\"error\",err=>{this.#inflate=null;callback(err)})}this.#inflate.write(chunk);if(fin){this.#inflate.write(tail)}this.#inflate.flush(()=>{const full=Buffer.concat(this.#inflate[kBuffer],this.#inflate[kLength]);this.#inflate[kBuffer].length=0;this.#inflate[kLength]=0;callback(null,full)})}}module.exports={PerMessageDeflate};\n})()\n","warnings":[],"map":{"version":3,"mappings":";+HAEA,KAAM,CAAE,iBAAkB,oBAAqB,EAAI,QAAQ,WAAW,EACtE,KAAM,CAAE,uBAAwB,EAAI,QAAQ,QAAQ,EAEpD,MAAM,KAAO,OAAO,KAAK,CAAC,EAAM,EAAM,IAAM,GAAI,CAAC,EACjD,MAAM,QAAU,OAAO,SAAS,EAChC,MAAM,QAAU,OAAO,SAAS,EAEhC,MAAM,iBAAkB,CATxB,MASwB,kCAEtB,SAEA,SAAW,CAAC,EAEZ,YAAa,WAAY,CACvB,KAAK,SAAS,wBAA0B,WAAW,IAAI,4BAA4B,EACnF,KAAK,SAAS,oBAAsB,WAAW,IAAI,wBAAwB,CAC7E,CAEA,WAAY,MAAO,IAAK,SAAU,CAMhC,GAAI,CAAC,KAAK,SAAU,CAClB,IAAI,WAAa,qBAEjB,GAAI,KAAK,SAAS,oBAAqB,CACrC,GAAI,CAAC,wBAAwB,KAAK,SAAS,mBAAmB,EAAG,CAC/D,SAAS,IAAI,MAAM,gCAAgC,CAAC,EACpD,MACF,CAEA,WAAa,OAAO,SAAS,KAAK,SAAS,mBAAmB,CAChE,CAEA,KAAK,SAAW,iBAAiB,CAAE,UAAW,CAAC,EAC/C,KAAK,SAAS,OAAO,EAAI,CAAC,EAC1B,KAAK,SAAS,OAAO,EAAI,EAEzB,KAAK,SAAS,GAAG,OAAS,MAAS,CACjC,KAAK,SAAS,OAAO,EAAE,KAAK,IAAI,EAChC,KAAK,SAAS,OAAO,GAAK,KAAK,MACjC,CAAC,EAED,KAAK,SAAS,GAAG,QAAU,KAAQ,CACjC,KAAK,SAAW,KAChB,SAAS,GAAG,CACd,CAAC,CACH,CAEA,KAAK,SAAS,MAAM,KAAK,EACzB,GAAI,IAAK,CACP,KAAK,SAAS,MAAM,IAAI,CAC1B,CAEA,KAAK,SAAS,MAAM,IAAM,CACxB,MAAM,KAAO,OAAO,OAAO,KAAK,SAAS,OAAO,EAAG,KAAK,SAAS,OAAO,CAAC,EAEzE,KAAK,SAAS,OAAO,EAAE,OAAS,EAChC,KAAK,SAAS,OAAO,EAAI,EAEzB,SAAS,KAAM,IAAI,CACrB,CAAC,CACH,CACF,CAEA,OAAO,QAAU,CAAE,iBAAkB","names":[],"sources":["/home/creditga/CofiCarte/node_modules/.pnpm/undici@6.21.0/node_modules/undici/lib/web/websocket/permessage-deflate.js"],"sourcesContent":["'use strict'\n\nconst { createInflateRaw, Z_DEFAULT_WINDOWBITS } = require('node:zlib')\nconst { isValidClientWindowBits } = require('./util')\n\nconst tail = Buffer.from([0x00, 0x00, 0xff, 0xff])\nconst kBuffer = Symbol('kBuffer')\nconst kLength = Symbol('kLength')\n\nclass PerMessageDeflate {\n  /** @type {import('node:zlib').InflateRaw} */\n  #inflate\n\n  #options = {}\n\n  constructor (extensions) {\n    this.#options.serverNoContextTakeover = extensions.has('server_no_context_takeover')\n    this.#options.serverMaxWindowBits = extensions.get('server_max_window_bits')\n  }\n\n  decompress (chunk, fin, callback) {\n    // An endpoint uses the following algorithm to decompress a message.\n    // 1.  Append 4 octets of 0x00 0x00 0xff 0xff to the tail end of the\n    //     payload of the message.\n    // 2.  Decompress the resulting data using DEFLATE.\n\n    if (!this.#inflate) {\n      let windowBits = Z_DEFAULT_WINDOWBITS\n\n      if (this.#options.serverMaxWindowBits) { // empty values default to Z_DEFAULT_WINDOWBITS\n        if (!isValidClientWindowBits(this.#options.serverMaxWindowBits)) {\n          callback(new Error('Invalid server_max_window_bits'))\n          return\n        }\n\n        windowBits = Number.parseInt(this.#options.serverMaxWindowBits)\n      }\n\n      this.#inflate = createInflateRaw({ windowBits })\n      this.#inflate[kBuffer] = []\n      this.#inflate[kLength] = 0\n\n      this.#inflate.on('data', (data) => {\n        this.#inflate[kBuffer].push(data)\n        this.#inflate[kLength] += data.length\n      })\n\n      this.#inflate.on('error', (err) => {\n        this.#inflate = null\n        callback(err)\n      })\n    }\n\n    this.#inflate.write(chunk)\n    if (fin) {\n      this.#inflate.write(tail)\n    }\n\n    this.#inflate.flush(() => {\n      const full = Buffer.concat(this.#inflate[kBuffer], this.#inflate[kLength])\n\n      this.#inflate[kBuffer].length = 0\n      this.#inflate[kLength] = 0\n\n      callback(null, full)\n    })\n  }\n}\n\nmodule.exports = { PerMessageDeflate }\n"]}}