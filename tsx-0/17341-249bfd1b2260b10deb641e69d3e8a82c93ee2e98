{"code":"(()=>{\n\"use strict\";var __defProp=Object.defineProperty;var __name=(target,value)=>__defProp(target,\"name\",{value,configurable:true});Object.defineProperty(exports,\"__esModule\",{value:true});exports.wrapInner=exports.wrap=exports.prepend=exports.append=void 0;exports._makeDomArray=_makeDomArray;exports.appendTo=appendTo;exports.prependTo=prependTo;exports.unwrap=unwrap;exports.wrapAll=wrapAll;exports.after=after;exports.insertAfter=insertAfter;exports.before=before;exports.insertBefore=insertBefore;exports.remove=remove;exports.replaceWith=replaceWith;exports.empty=empty;exports.html=html;exports.toString=toString;exports.text=text;exports.clone=clone;const domhandler_1=require(\"domhandler\");const parse_js_1=require(\"../parse.js\");const static_js_1=require(\"../static.js\");const utils_js_1=require(\"../utils.js\");const domutils_1=require(\"domutils\");function _makeDomArray(elem,clone2){if(elem==null){return[]}if(typeof elem===\"string\"){return this._parse(elem,this.options,false,null).children.slice(0)}if(\"length\"in elem){if(elem.length===1){return this._makeDomArray(elem[0],clone2)}const result=[];for(let i=0;i<elem.length;i++){const el=elem[i];if(typeof el===\"object\"){if(el==null){continue}if(!(\"length\"in el)){result.push(clone2?(0,domhandler_1.cloneNode)(el,true):el);continue}}result.push(...this._makeDomArray(el,clone2))}return result}return[clone2?(0,domhandler_1.cloneNode)(elem,true):elem]}__name(_makeDomArray,\"_makeDomArray\");function _insert(concatenator){return function(...elems){const lastIdx=this.length-1;return(0,utils_js_1.domEach)(this,(el,i)=>{if(!(0,domhandler_1.hasChildren)(el))return;const domSrc=typeof elems[0]===\"function\"?elems[0].call(el,i,this._render(el.children)):elems;const dom=this._makeDomArray(domSrc,i<lastIdx);concatenator(dom,el.children,el)})}}__name(_insert,\"_insert\");function uniqueSplice(array,spliceIdx,spliceCount,newElems,parent){var _a,_b;const spliceArgs=[spliceIdx,spliceCount,...newElems];const prev=spliceIdx===0?null:array[spliceIdx-1];const next=spliceIdx+spliceCount>=array.length?null:array[spliceIdx+spliceCount];for(let idx=0;idx<newElems.length;++idx){const node=newElems[idx];const oldParent=node.parent;if(oldParent){const oldSiblings=oldParent.children;const prevIdx=oldSiblings.indexOf(node);if(prevIdx>-1){oldParent.children.splice(prevIdx,1);if(parent===oldParent&&spliceIdx>prevIdx){spliceArgs[0]--}}}node.parent=parent;if(node.prev){node.prev.next=(_a=node.next)!==null&&_a!==void 0?_a:null}if(node.next){node.next.prev=(_b=node.prev)!==null&&_b!==void 0?_b:null}node.prev=idx===0?prev:newElems[idx-1];node.next=idx===newElems.length-1?next:newElems[idx+1]}if(prev){prev.next=newElems[0]}if(next){next.prev=newElems[newElems.length-1]}return array.splice(...spliceArgs)}__name(uniqueSplice,\"uniqueSplice\");function appendTo(target){const appendTarget=(0,utils_js_1.isCheerio)(target)?target:this._make(target);appendTarget.append(this);return this}__name(appendTo,\"appendTo\");function prependTo(target){const prependTarget=(0,utils_js_1.isCheerio)(target)?target:this._make(target);prependTarget.prepend(this);return this}__name(prependTo,\"prependTo\");exports.append=_insert((dom,children,parent)=>{uniqueSplice(children,children.length,0,dom,parent)});exports.prepend=_insert((dom,children,parent)=>{uniqueSplice(children,0,0,dom,parent)});function _wrap(insert){return function(wrapper){const lastIdx=this.length-1;const lastParent=this.parents().last();for(let i=0;i<this.length;i++){const el=this[i];const wrap=typeof wrapper===\"function\"?wrapper.call(el,i,el):typeof wrapper===\"string\"&&!(0,utils_js_1.isHtml)(wrapper)?lastParent.find(wrapper).clone():wrapper;const[wrapperDom]=this._makeDomArray(wrap,i<lastIdx);if(!wrapperDom||!(0,domhandler_1.hasChildren)(wrapperDom))continue;let elInsertLocation=wrapperDom;let j=0;while(j<elInsertLocation.children.length){const child=elInsertLocation.children[j];if((0,domhandler_1.isTag)(child)){elInsertLocation=child;j=0}else{j++}}insert(el,elInsertLocation,[wrapperDom])}return this}}__name(_wrap,\"_wrap\");exports.wrap=_wrap((el,elInsertLocation,wrapperDom)=>{const{parent}=el;if(!parent)return;const siblings=parent.children;const index=siblings.indexOf(el);(0,parse_js_1.update)([el],elInsertLocation);uniqueSplice(siblings,index,0,wrapperDom,parent)});exports.wrapInner=_wrap((el,elInsertLocation,wrapperDom)=>{if(!(0,domhandler_1.hasChildren)(el))return;(0,parse_js_1.update)(el.children,elInsertLocation);(0,parse_js_1.update)(wrapperDom,el)});function unwrap(selector){this.parent(selector).not(\"body\").each((_,el)=>{this._make(el).replaceWith(el.children)});return this}__name(unwrap,\"unwrap\");function wrapAll(wrapper){const el=this[0];if(el){const wrap=this._make(typeof wrapper===\"function\"?wrapper.call(el,0,el):wrapper).insertBefore(el);let elInsertLocation;for(let i=0;i<wrap.length;i++){if(wrap[i].type===\"tag\")elInsertLocation=wrap[i]}let j=0;while(elInsertLocation&&j<elInsertLocation.children.length){const child=elInsertLocation.children[j];if(child.type===\"tag\"){elInsertLocation=child;j=0}else{j++}}if(elInsertLocation)this._make(elInsertLocation).append(this)}return this}__name(wrapAll,\"wrapAll\");function after(...elems){const lastIdx=this.length-1;return(0,utils_js_1.domEach)(this,(el,i)=>{if(!(0,domhandler_1.hasChildren)(el)||!el.parent){return}const siblings=el.parent.children;const index=siblings.indexOf(el);if(index<0)return;const domSrc=typeof elems[0]===\"function\"?elems[0].call(el,i,this._render(el.children)):elems;const dom=this._makeDomArray(domSrc,i<lastIdx);uniqueSplice(siblings,index+1,0,dom,el.parent)})}__name(after,\"after\");function insertAfter(target){if(typeof target===\"string\"){target=this._make(target)}this.remove();const clones=[];for(const el of this._makeDomArray(target)){const clonedSelf=this.clone().toArray();const{parent}=el;if(!parent){continue}const siblings=parent.children;const index=siblings.indexOf(el);if(index<0)continue;uniqueSplice(siblings,index+1,0,clonedSelf,parent);clones.push(...clonedSelf)}return this._make(clones)}__name(insertAfter,\"insertAfter\");function before(...elems){const lastIdx=this.length-1;return(0,utils_js_1.domEach)(this,(el,i)=>{if(!(0,domhandler_1.hasChildren)(el)||!el.parent){return}const siblings=el.parent.children;const index=siblings.indexOf(el);if(index<0)return;const domSrc=typeof elems[0]===\"function\"?elems[0].call(el,i,this._render(el.children)):elems;const dom=this._makeDomArray(domSrc,i<lastIdx);uniqueSplice(siblings,index,0,dom,el.parent)})}__name(before,\"before\");function insertBefore(target){const targetArr=this._make(target);this.remove();const clones=[];(0,utils_js_1.domEach)(targetArr,el=>{const clonedSelf=this.clone().toArray();const{parent}=el;if(!parent){return}const siblings=parent.children;const index=siblings.indexOf(el);if(index<0)return;uniqueSplice(siblings,index,0,clonedSelf,parent);clones.push(...clonedSelf)});return this._make(clones)}__name(insertBefore,\"insertBefore\");function remove(selector){const elems=selector?this.filter(selector):this;(0,utils_js_1.domEach)(elems,el=>{(0,domutils_1.removeElement)(el);el.prev=el.next=el.parent=null});return this}__name(remove,\"remove\");function replaceWith(content){return(0,utils_js_1.domEach)(this,(el,i)=>{const{parent}=el;if(!parent){return}const siblings=parent.children;const cont=typeof content===\"function\"?content.call(el,i,el):content;const dom=this._makeDomArray(cont);(0,parse_js_1.update)(dom,null);const index=siblings.indexOf(el);uniqueSplice(siblings,index,1,dom,parent);if(!dom.includes(el)){el.parent=el.prev=el.next=null}})}__name(replaceWith,\"replaceWith\");function empty(){return(0,utils_js_1.domEach)(this,el=>{if(!(0,domhandler_1.hasChildren)(el))return;for(const child of el.children){child.next=child.prev=child.parent=null}el.children.length=0})}__name(empty,\"empty\");function html(str){if(str===void 0){const el=this[0];if(!el||!(0,domhandler_1.hasChildren)(el))return null;return this._render(el.children)}return(0,utils_js_1.domEach)(this,el=>{if(!(0,domhandler_1.hasChildren)(el))return;for(const child of el.children){child.next=child.prev=child.parent=null}const content=(0,utils_js_1.isCheerio)(str)?str.toArray():this._parse(`${str}`,this.options,false,el).children;(0,parse_js_1.update)(content,el)})}__name(html,\"html\");function toString(){return this._render(this)}__name(toString,\"toString\");function text(str){if(str===void 0){return(0,static_js_1.text)(this)}if(typeof str===\"function\"){return(0,utils_js_1.domEach)(this,(el,i)=>this._make(el).text(str.call(el,i,(0,static_js_1.text)([el]))))}return(0,utils_js_1.domEach)(this,el=>{if(!(0,domhandler_1.hasChildren)(el))return;for(const child of el.children){child.next=child.prev=child.parent=null}const textNode=new domhandler_1.Text(`${str}`);(0,parse_js_1.update)(textNode,el)})}__name(text,\"text\");function clone(){const clone2=Array.prototype.map.call(this.get(),el=>(0,domhandler_1.cloneNode)(el,true));const root=new domhandler_1.Document(clone2);for(const node of clone2){node.parent=root}return this._make(clone2)}__name(clone,\"clone\");\n})()\n","warnings":[],"map":{"version":3,"mappings":"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","names":["clone"],"sources":["/home/creditga/CofiCarte/node_modules/.pnpm/cheerio@1.0.0/node_modules/cheerio/dist/commonjs/api/manipulation.js"],"sourcesContent":["\"use strict\";\n/**\n * Methods for modifying the DOM structure.\n *\n * @module cheerio/manipulation\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.wrapInner = exports.wrap = exports.prepend = exports.append = void 0;\nexports._makeDomArray = _makeDomArray;\nexports.appendTo = appendTo;\nexports.prependTo = prependTo;\nexports.unwrap = unwrap;\nexports.wrapAll = wrapAll;\nexports.after = after;\nexports.insertAfter = insertAfter;\nexports.before = before;\nexports.insertBefore = insertBefore;\nexports.remove = remove;\nexports.replaceWith = replaceWith;\nexports.empty = empty;\nexports.html = html;\nexports.toString = toString;\nexports.text = text;\nexports.clone = clone;\nconst domhandler_1 = require(\"domhandler\");\nconst parse_js_1 = require(\"../parse.js\");\nconst static_js_1 = require(\"../static.js\");\nconst utils_js_1 = require(\"../utils.js\");\nconst domutils_1 = require(\"domutils\");\n/**\n * Create an array of nodes, recursing into arrays and parsing strings if\n * necessary.\n *\n * @private\n * @category Manipulation\n * @param elem - Elements to make an array of.\n * @param clone - Optionally clone nodes.\n * @returns The array of nodes.\n */\nfunction _makeDomArray(elem, clone) {\n    if (elem == null) {\n        return [];\n    }\n    if (typeof elem === 'string') {\n        return this._parse(elem, this.options, false, null).children.slice(0);\n    }\n    if ('length' in elem) {\n        if (elem.length === 1) {\n            return this._makeDomArray(elem[0], clone);\n        }\n        const result = [];\n        for (let i = 0; i < elem.length; i++) {\n            const el = elem[i];\n            if (typeof el === 'object') {\n                if (el == null) {\n                    continue;\n                }\n                if (!('length' in el)) {\n                    result.push(clone ? (0, domhandler_1.cloneNode)(el, true) : el);\n                    continue;\n                }\n            }\n            result.push(...this._makeDomArray(el, clone));\n        }\n        return result;\n    }\n    return [clone ? (0, domhandler_1.cloneNode)(elem, true) : elem];\n}\nfunction _insert(concatenator) {\n    return function (...elems) {\n        const lastIdx = this.length - 1;\n        return (0, utils_js_1.domEach)(this, (el, i) => {\n            if (!(0, domhandler_1.hasChildren)(el))\n                return;\n            const domSrc = typeof elems[0] === 'function'\n                ? elems[0].call(el, i, this._render(el.children))\n                : elems;\n            const dom = this._makeDomArray(domSrc, i < lastIdx);\n            concatenator(dom, el.children, el);\n        });\n    };\n}\n/**\n * Modify an array in-place, removing some number of elements and adding new\n * elements directly following them.\n *\n * @private\n * @category Manipulation\n * @param array - Target array to splice.\n * @param spliceIdx - Index at which to begin changing the array.\n * @param spliceCount - Number of elements to remove from the array.\n * @param newElems - Elements to insert into the array.\n * @param parent - The parent of the node.\n * @returns The spliced array.\n */\nfunction uniqueSplice(array, spliceIdx, spliceCount, newElems, parent) {\n    var _a, _b;\n    const spliceArgs = [\n        spliceIdx,\n        spliceCount,\n        ...newElems,\n    ];\n    const prev = spliceIdx === 0 ? null : array[spliceIdx - 1];\n    const next = spliceIdx + spliceCount >= array.length\n        ? null\n        : array[spliceIdx + spliceCount];\n    /*\n     * Before splicing in new elements, ensure they do not already appear in the\n     * current array.\n     */\n    for (let idx = 0; idx < newElems.length; ++idx) {\n        const node = newElems[idx];\n        const oldParent = node.parent;\n        if (oldParent) {\n            const oldSiblings = oldParent.children;\n            const prevIdx = oldSiblings.indexOf(node);\n            if (prevIdx > -1) {\n                oldParent.children.splice(prevIdx, 1);\n                if (parent === oldParent && spliceIdx > prevIdx) {\n                    spliceArgs[0]--;\n                }\n            }\n        }\n        node.parent = parent;\n        if (node.prev) {\n            node.prev.next = (_a = node.next) !== null && _a !== void 0 ? _a : null;\n        }\n        if (node.next) {\n            node.next.prev = (_b = node.prev) !== null && _b !== void 0 ? _b : null;\n        }\n        node.prev = idx === 0 ? prev : newElems[idx - 1];\n        node.next = idx === newElems.length - 1 ? next : newElems[idx + 1];\n    }\n    if (prev) {\n        prev.next = newElems[0];\n    }\n    if (next) {\n        next.prev = newElems[newElems.length - 1];\n    }\n    return array.splice(...spliceArgs);\n}\n/**\n * Insert every element in the set of matched elements to the end of the target.\n *\n * @category Manipulation\n * @example\n *\n * ```js\n * $('<li class=\"plum\">Plum</li>').appendTo('#fruits');\n * $.html();\n * //=>  <ul id=\"fruits\">\n * //      <li class=\"apple\">Apple</li>\n * //      <li class=\"orange\">Orange</li>\n * //      <li class=\"pear\">Pear</li>\n * //      <li class=\"plum\">Plum</li>\n * //    </ul>\n * ```\n *\n * @param target - Element to append elements to.\n * @returns The instance itself.\n * @see {@link https://api.jquery.com/appendTo/}\n */\nfunction appendTo(target) {\n    const appendTarget = (0, utils_js_1.isCheerio)(target) ? target : this._make(target);\n    appendTarget.append(this);\n    return this;\n}\n/**\n * Insert every element in the set of matched elements to the beginning of the\n * target.\n *\n * @category Manipulation\n * @example\n *\n * ```js\n * $('<li class=\"plum\">Plum</li>').prependTo('#fruits');\n * $.html();\n * //=>  <ul id=\"fruits\">\n * //      <li class=\"plum\">Plum</li>\n * //      <li class=\"apple\">Apple</li>\n * //      <li class=\"orange\">Orange</li>\n * //      <li class=\"pear\">Pear</li>\n * //    </ul>\n * ```\n *\n * @param target - Element to prepend elements to.\n * @returns The instance itself.\n * @see {@link https://api.jquery.com/prependTo/}\n */\nfunction prependTo(target) {\n    const prependTarget = (0, utils_js_1.isCheerio)(target) ? target : this._make(target);\n    prependTarget.prepend(this);\n    return this;\n}\n/**\n * Inserts content as the _last_ child of each of the selected elements.\n *\n * @category Manipulation\n * @example\n *\n * ```js\n * $('ul').append('<li class=\"plum\">Plum</li>');\n * $.html();\n * //=>  <ul id=\"fruits\">\n * //      <li class=\"apple\">Apple</li>\n * //      <li class=\"orange\">Orange</li>\n * //      <li class=\"pear\">Pear</li>\n * //      <li class=\"plum\">Plum</li>\n * //    </ul>\n * ```\n *\n * @see {@link https://api.jquery.com/append/}\n */\nexports.append = _insert((dom, children, parent) => {\n    uniqueSplice(children, children.length, 0, dom, parent);\n});\n/**\n * Inserts content as the _first_ child of each of the selected elements.\n *\n * @category Manipulation\n * @example\n *\n * ```js\n * $('ul').prepend('<li class=\"plum\">Plum</li>');\n * $.html();\n * //=>  <ul id=\"fruits\">\n * //      <li class=\"plum\">Plum</li>\n * //      <li class=\"apple\">Apple</li>\n * //      <li class=\"orange\">Orange</li>\n * //      <li class=\"pear\">Pear</li>\n * //    </ul>\n * ```\n *\n * @see {@link https://api.jquery.com/prepend/}\n */\nexports.prepend = _insert((dom, children, parent) => {\n    uniqueSplice(children, 0, 0, dom, parent);\n});\nfunction _wrap(insert) {\n    return function (wrapper) {\n        const lastIdx = this.length - 1;\n        const lastParent = this.parents().last();\n        for (let i = 0; i < this.length; i++) {\n            const el = this[i];\n            const wrap = typeof wrapper === 'function'\n                ? wrapper.call(el, i, el)\n                : typeof wrapper === 'string' && !(0, utils_js_1.isHtml)(wrapper)\n                    ? lastParent.find(wrapper).clone()\n                    : wrapper;\n            const [wrapperDom] = this._makeDomArray(wrap, i < lastIdx);\n            if (!wrapperDom || !(0, domhandler_1.hasChildren)(wrapperDom))\n                continue;\n            let elInsertLocation = wrapperDom;\n            /*\n             * Find the deepest child. Only consider the first tag child of each node\n             * (ignore text); stop if no children are found.\n             */\n            let j = 0;\n            while (j < elInsertLocation.children.length) {\n                const child = elInsertLocation.children[j];\n                if ((0, domhandler_1.isTag)(child)) {\n                    elInsertLocation = child;\n                    j = 0;\n                }\n                else {\n                    j++;\n                }\n            }\n            insert(el, elInsertLocation, [wrapperDom]);\n        }\n        return this;\n    };\n}\n/**\n * The .wrap() function can take any string or object that could be passed to\n * the $() factory function to specify a DOM structure. This structure may be\n * nested several levels deep, but should contain only one inmost element. A\n * copy of this structure will be wrapped around each of the elements in the set\n * of matched elements. This method returns the original set of elements for\n * chaining purposes.\n *\n * @category Manipulation\n * @example\n *\n * ```js\n * const redFruit = $('<div class=\"red-fruit\"></div>');\n * $('.apple').wrap(redFruit);\n *\n * //=> <ul id=\"fruits\">\n * //     <div class=\"red-fruit\">\n * //      <li class=\"apple\">Apple</li>\n * //     </div>\n * //     <li class=\"orange\">Orange</li>\n * //     <li class=\"plum\">Plum</li>\n * //   </ul>\n *\n * const healthy = $('<div class=\"healthy\"></div>');\n * $('li').wrap(healthy);\n *\n * //=> <ul id=\"fruits\">\n * //     <div class=\"healthy\">\n * //       <li class=\"apple\">Apple</li>\n * //     </div>\n * //     <div class=\"healthy\">\n * //       <li class=\"orange\">Orange</li>\n * //     </div>\n * //     <div class=\"healthy\">\n * //        <li class=\"plum\">Plum</li>\n * //     </div>\n * //   </ul>\n * ```\n *\n * @param wrapper - The DOM structure to wrap around each element in the\n *   selection.\n * @see {@link https://api.jquery.com/wrap/}\n */\nexports.wrap = _wrap((el, elInsertLocation, wrapperDom) => {\n    const { parent } = el;\n    if (!parent)\n        return;\n    const siblings = parent.children;\n    const index = siblings.indexOf(el);\n    (0, parse_js_1.update)([el], elInsertLocation);\n    /*\n     * The previous operation removed the current element from the `siblings`\n     * array, so the `dom` array can be inserted without removing any\n     * additional elements.\n     */\n    uniqueSplice(siblings, index, 0, wrapperDom, parent);\n});\n/**\n * The .wrapInner() function can take any string or object that could be passed\n * to the $() factory function to specify a DOM structure. This structure may be\n * nested several levels deep, but should contain only one inmost element. The\n * structure will be wrapped around the content of each of the elements in the\n * set of matched elements.\n *\n * @category Manipulation\n * @example\n *\n * ```js\n * const redFruit = $('<div class=\"red-fruit\"></div>');\n * $('.apple').wrapInner(redFruit);\n *\n * //=> <ul id=\"fruits\">\n * //     <li class=\"apple\">\n * //       <div class=\"red-fruit\">Apple</div>\n * //     </li>\n * //     <li class=\"orange\">Orange</li>\n * //     <li class=\"pear\">Pear</li>\n * //   </ul>\n *\n * const healthy = $('<div class=\"healthy\"></div>');\n * $('li').wrapInner(healthy);\n *\n * //=> <ul id=\"fruits\">\n * //     <li class=\"apple\">\n * //       <div class=\"healthy\">Apple</div>\n * //     </li>\n * //     <li class=\"orange\">\n * //       <div class=\"healthy\">Orange</div>\n * //     </li>\n * //     <li class=\"pear\">\n * //       <div class=\"healthy\">Pear</div>\n * //     </li>\n * //   </ul>\n * ```\n *\n * @param wrapper - The DOM structure to wrap around the content of each element\n *   in the selection.\n * @returns The instance itself, for chaining.\n * @see {@link https://api.jquery.com/wrapInner/}\n */\nexports.wrapInner = _wrap((el, elInsertLocation, wrapperDom) => {\n    if (!(0, domhandler_1.hasChildren)(el))\n        return;\n    (0, parse_js_1.update)(el.children, elInsertLocation);\n    (0, parse_js_1.update)(wrapperDom, el);\n});\n/**\n * The .unwrap() function, removes the parents of the set of matched elements\n * from the DOM, leaving the matched elements in their place.\n *\n * @category Manipulation\n * @example <caption>without selector</caption>\n *\n * ```js\n * const $ = cheerio.load(\n *   '<div id=test>\\n  <div><p>Hello</p></div>\\n  <div><p>World</p></div>\\n</div>',\n * );\n * $('#test p').unwrap();\n *\n * //=> <div id=test>\n * //     <p>Hello</p>\n * //     <p>World</p>\n * //   </div>\n * ```\n *\n * @example <caption>with selector</caption>\n *\n * ```js\n * const $ = cheerio.load(\n *   '<div id=test>\\n  <p>Hello</p>\\n  <b><p>World</p></b>\\n</div>',\n * );\n * $('#test p').unwrap('b');\n *\n * //=> <div id=test>\n * //     <p>Hello</p>\n * //     <p>World</p>\n * //   </div>\n * ```\n *\n * @param selector - A selector to check the parent element against. If an\n *   element's parent does not match the selector, the element won't be\n *   unwrapped.\n * @returns The instance itself, for chaining.\n * @see {@link https://api.jquery.com/unwrap/}\n */\nfunction unwrap(selector) {\n    this.parent(selector)\n        .not('body')\n        .each((_, el) => {\n        this._make(el).replaceWith(el.children);\n    });\n    return this;\n}\n/**\n * The .wrapAll() function can take any string or object that could be passed to\n * the $() function to specify a DOM structure. This structure may be nested\n * several levels deep, but should contain only one inmost element. The\n * structure will be wrapped around all of the elements in the set of matched\n * elements, as a single group.\n *\n * @category Manipulation\n * @example <caption>With markup passed to `wrapAll`</caption>\n *\n * ```js\n * const $ = cheerio.load(\n *   '<div class=\"container\"><div class=\"inner\">First</div><div class=\"inner\">Second</div></div>',\n * );\n * $('.inner').wrapAll(\"<div class='new'></div>\");\n *\n * //=> <div class=\"container\">\n * //     <div class='new'>\n * //       <div class=\"inner\">First</div>\n * //       <div class=\"inner\">Second</div>\n * //     </div>\n * //   </div>\n * ```\n *\n * @example <caption>With an existing cheerio instance</caption>\n *\n * ```js\n * const $ = cheerio.load(\n *   '<span>Span 1</span><strong>Strong</strong><span>Span 2</span>',\n * );\n * const wrap = $('<div><p><em><b></b></em></p></div>');\n * $('span').wrapAll(wrap);\n *\n * //=> <div>\n * //     <p>\n * //       <em>\n * //         <b>\n * //           <span>Span 1</span>\n * //           <span>Span 2</span>\n * //         </b>\n * //       </em>\n * //     </p>\n * //   </div>\n * //   <strong>Strong</strong>\n * ```\n *\n * @param wrapper - The DOM structure to wrap around all matched elements in the\n *   selection.\n * @returns The instance itself.\n * @see {@link https://api.jquery.com/wrapAll/}\n */\nfunction wrapAll(wrapper) {\n    const el = this[0];\n    if (el) {\n        const wrap = this._make(typeof wrapper === 'function' ? wrapper.call(el, 0, el) : wrapper).insertBefore(el);\n        // If html is given as wrapper, wrap may contain text elements\n        let elInsertLocation;\n        for (let i = 0; i < wrap.length; i++) {\n            if (wrap[i].type === 'tag')\n                elInsertLocation = wrap[i];\n        }\n        let j = 0;\n        /*\n         * Find the deepest child. Only consider the first tag child of each node\n         * (ignore text); stop if no children are found.\n         */\n        while (elInsertLocation && j < elInsertLocation.children.length) {\n            const child = elInsertLocation.children[j];\n            if (child.type === 'tag') {\n                elInsertLocation = child;\n                j = 0;\n            }\n            else {\n                j++;\n            }\n        }\n        if (elInsertLocation)\n            this._make(elInsertLocation).append(this);\n    }\n    return this;\n}\n/**\n * Insert content next to each element in the set of matched elements.\n *\n * @category Manipulation\n * @example\n *\n * ```js\n * $('.apple').after('<li class=\"plum\">Plum</li>');\n * $.html();\n * //=>  <ul id=\"fruits\">\n * //      <li class=\"apple\">Apple</li>\n * //      <li class=\"plum\">Plum</li>\n * //      <li class=\"orange\">Orange</li>\n * //      <li class=\"pear\">Pear</li>\n * //    </ul>\n * ```\n *\n * @param elems - HTML string, DOM element, array of DOM elements or Cheerio to\n *   insert after each element in the set of matched elements.\n * @returns The instance itself.\n * @see {@link https://api.jquery.com/after/}\n */\nfunction after(...elems) {\n    const lastIdx = this.length - 1;\n    return (0, utils_js_1.domEach)(this, (el, i) => {\n        if (!(0, domhandler_1.hasChildren)(el) || !el.parent) {\n            return;\n        }\n        const siblings = el.parent.children;\n        const index = siblings.indexOf(el);\n        // If not found, move on\n        /* istanbul ignore next */\n        if (index < 0)\n            return;\n        const domSrc = typeof elems[0] === 'function'\n            ? elems[0].call(el, i, this._render(el.children))\n            : elems;\n        const dom = this._makeDomArray(domSrc, i < lastIdx);\n        // Add element after `this` element\n        uniqueSplice(siblings, index + 1, 0, dom, el.parent);\n    });\n}\n/**\n * Insert every element in the set of matched elements after the target.\n *\n * @category Manipulation\n * @example\n *\n * ```js\n * $('<li class=\"plum\">Plum</li>').insertAfter('.apple');\n * $.html();\n * //=>  <ul id=\"fruits\">\n * //      <li class=\"apple\">Apple</li>\n * //      <li class=\"plum\">Plum</li>\n * //      <li class=\"orange\">Orange</li>\n * //      <li class=\"pear\">Pear</li>\n * //    </ul>\n * ```\n *\n * @param target - Element to insert elements after.\n * @returns The set of newly inserted elements.\n * @see {@link https://api.jquery.com/insertAfter/}\n */\nfunction insertAfter(target) {\n    if (typeof target === 'string') {\n        target = this._make(target);\n    }\n    this.remove();\n    const clones = [];\n    for (const el of this._makeDomArray(target)) {\n        const clonedSelf = this.clone().toArray();\n        const { parent } = el;\n        if (!parent) {\n            continue;\n        }\n        const siblings = parent.children;\n        const index = siblings.indexOf(el);\n        // If not found, move on\n        /* istanbul ignore next */\n        if (index < 0)\n            continue;\n        // Add cloned `this` element(s) after target element\n        uniqueSplice(siblings, index + 1, 0, clonedSelf, parent);\n        clones.push(...clonedSelf);\n    }\n    return this._make(clones);\n}\n/**\n * Insert content previous to each element in the set of matched elements.\n *\n * @category Manipulation\n * @example\n *\n * ```js\n * $('.apple').before('<li class=\"plum\">Plum</li>');\n * $.html();\n * //=>  <ul id=\"fruits\">\n * //      <li class=\"plum\">Plum</li>\n * //      <li class=\"apple\">Apple</li>\n * //      <li class=\"orange\">Orange</li>\n * //      <li class=\"pear\">Pear</li>\n * //    </ul>\n * ```\n *\n * @param elems - HTML string, DOM element, array of DOM elements or Cheerio to\n *   insert before each element in the set of matched elements.\n * @returns The instance itself.\n * @see {@link https://api.jquery.com/before/}\n */\nfunction before(...elems) {\n    const lastIdx = this.length - 1;\n    return (0, utils_js_1.domEach)(this, (el, i) => {\n        if (!(0, domhandler_1.hasChildren)(el) || !el.parent) {\n            return;\n        }\n        const siblings = el.parent.children;\n        const index = siblings.indexOf(el);\n        // If not found, move on\n        /* istanbul ignore next */\n        if (index < 0)\n            return;\n        const domSrc = typeof elems[0] === 'function'\n            ? elems[0].call(el, i, this._render(el.children))\n            : elems;\n        const dom = this._makeDomArray(domSrc, i < lastIdx);\n        // Add element before `el` element\n        uniqueSplice(siblings, index, 0, dom, el.parent);\n    });\n}\n/**\n * Insert every element in the set of matched elements before the target.\n *\n * @category Manipulation\n * @example\n *\n * ```js\n * $('<li class=\"plum\">Plum</li>').insertBefore('.apple');\n * $.html();\n * //=>  <ul id=\"fruits\">\n * //      <li class=\"plum\">Plum</li>\n * //      <li class=\"apple\">Apple</li>\n * //      <li class=\"orange\">Orange</li>\n * //      <li class=\"pear\">Pear</li>\n * //    </ul>\n * ```\n *\n * @param target - Element to insert elements before.\n * @returns The set of newly inserted elements.\n * @see {@link https://api.jquery.com/insertBefore/}\n */\nfunction insertBefore(target) {\n    const targetArr = this._make(target);\n    this.remove();\n    const clones = [];\n    (0, utils_js_1.domEach)(targetArr, (el) => {\n        const clonedSelf = this.clone().toArray();\n        const { parent } = el;\n        if (!parent) {\n            return;\n        }\n        const siblings = parent.children;\n        const index = siblings.indexOf(el);\n        // If not found, move on\n        /* istanbul ignore next */\n        if (index < 0)\n            return;\n        // Add cloned `this` element(s) after target element\n        uniqueSplice(siblings, index, 0, clonedSelf, parent);\n        clones.push(...clonedSelf);\n    });\n    return this._make(clones);\n}\n/**\n * Removes the set of matched elements from the DOM and all their children.\n * `selector` filters the set of matched elements to be removed.\n *\n * @category Manipulation\n * @example\n *\n * ```js\n * $('.pear').remove();\n * $.html();\n * //=>  <ul id=\"fruits\">\n * //      <li class=\"apple\">Apple</li>\n * //      <li class=\"orange\">Orange</li>\n * //    </ul>\n * ```\n *\n * @param selector - Optional selector for elements to remove.\n * @returns The instance itself.\n * @see {@link https://api.jquery.com/remove/}\n */\nfunction remove(selector) {\n    // Filter if we have selector\n    const elems = selector ? this.filter(selector) : this;\n    (0, utils_js_1.domEach)(elems, (el) => {\n        (0, domutils_1.removeElement)(el);\n        el.prev = el.next = el.parent = null;\n    });\n    return this;\n}\n/**\n * Replaces matched elements with `content`.\n *\n * @category Manipulation\n * @example\n *\n * ```js\n * const plum = $('<li class=\"plum\">Plum</li>');\n * $('.pear').replaceWith(plum);\n * $.html();\n * //=> <ul id=\"fruits\">\n * //     <li class=\"apple\">Apple</li>\n * //     <li class=\"orange\">Orange</li>\n * //     <li class=\"plum\">Plum</li>\n * //   </ul>\n * ```\n *\n * @param content - Replacement for matched elements.\n * @returns The instance itself.\n * @see {@link https://api.jquery.com/replaceWith/}\n */\nfunction replaceWith(content) {\n    return (0, utils_js_1.domEach)(this, (el, i) => {\n        const { parent } = el;\n        if (!parent) {\n            return;\n        }\n        const siblings = parent.children;\n        const cont = typeof content === 'function' ? content.call(el, i, el) : content;\n        const dom = this._makeDomArray(cont);\n        /*\n         * In the case that `dom` contains nodes that already exist in other\n         * structures, ensure those nodes are properly removed.\n         */\n        (0, parse_js_1.update)(dom, null);\n        const index = siblings.indexOf(el);\n        // Completely remove old element\n        uniqueSplice(siblings, index, 1, dom, parent);\n        if (!dom.includes(el)) {\n            el.parent = el.prev = el.next = null;\n        }\n    });\n}\n/**\n * Removes all children from each item in the selection. Text nodes and comment\n * nodes are left as is.\n *\n * @category Manipulation\n * @example\n *\n * ```js\n * $('ul').empty();\n * $.html();\n * //=>  <ul id=\"fruits\"></ul>\n * ```\n *\n * @returns The instance itself.\n * @see {@link https://api.jquery.com/empty/}\n */\nfunction empty() {\n    return (0, utils_js_1.domEach)(this, (el) => {\n        if (!(0, domhandler_1.hasChildren)(el))\n            return;\n        for (const child of el.children) {\n            child.next = child.prev = child.parent = null;\n        }\n        el.children.length = 0;\n    });\n}\nfunction html(str) {\n    if (str === undefined) {\n        const el = this[0];\n        if (!el || !(0, domhandler_1.hasChildren)(el))\n            return null;\n        return this._render(el.children);\n    }\n    return (0, utils_js_1.domEach)(this, (el) => {\n        if (!(0, domhandler_1.hasChildren)(el))\n            return;\n        for (const child of el.children) {\n            child.next = child.prev = child.parent = null;\n        }\n        const content = (0, utils_js_1.isCheerio)(str)\n            ? str.toArray()\n            : this._parse(`${str}`, this.options, false, el).children;\n        (0, parse_js_1.update)(content, el);\n    });\n}\n/**\n * Turns the collection to a string. Alias for `.html()`.\n *\n * @category Manipulation\n * @returns The rendered document.\n */\nfunction toString() {\n    return this._render(this);\n}\nfunction text(str) {\n    // If `str` is undefined, act as a \"getter\"\n    if (str === undefined) {\n        return (0, static_js_1.text)(this);\n    }\n    if (typeof str === 'function') {\n        // Function support\n        return (0, utils_js_1.domEach)(this, (el, i) => this._make(el).text(str.call(el, i, (0, static_js_1.text)([el]))));\n    }\n    // Append text node to each selected elements\n    return (0, utils_js_1.domEach)(this, (el) => {\n        if (!(0, domhandler_1.hasChildren)(el))\n            return;\n        for (const child of el.children) {\n            child.next = child.prev = child.parent = null;\n        }\n        const textNode = new domhandler_1.Text(`${str}`);\n        (0, parse_js_1.update)(textNode, el);\n    });\n}\n/**\n * Clone the cheerio object.\n *\n * @category Manipulation\n * @example\n *\n * ```js\n * const moreFruit = $('#fruits').clone();\n * ```\n *\n * @returns The cloned object.\n * @see {@link https://api.jquery.com/clone/}\n */\nfunction clone() {\n    const clone = Array.prototype.map.call(this.get(), (el) => (0, domhandler_1.cloneNode)(el, true));\n    // Add a root node around the cloned nodes\n    const root = new domhandler_1.Document(clone);\n    for (const node of clone) {\n        node.parent = root;\n    }\n    return this._make(clone);\n}\n//# sourceMappingURL=manipulation.js.map"]}}