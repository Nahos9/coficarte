{"code":"(()=>{\n\"use strict\";var __defProp=Object.defineProperty;var __name=(target,value)=>__defProp(target,\"name\",{value,configurable:true});Object.defineProperty(exports,\"__esModule\",{value:true});exports.serialize=serialize;exports.serializeArray=serializeArray;const domhandler_1=require(\"domhandler\");const submittableSelector=\"input,select,textarea,keygen\";const r20=/%20/g;const rCRLF=/\\r?\\n/g;function serialize(){const arr=this.serializeArray();const retArr=arr.map(data=>`${encodeURIComponent(data.name)}=${encodeURIComponent(data.value)}`);return retArr.join(\"&\").replace(r20,\"+\")}__name(serialize,\"serialize\");function serializeArray(){return this.map((_,elem)=>{const $elem=this._make(elem);if((0,domhandler_1.isTag)(elem)&&elem.name===\"form\"){return $elem.find(submittableSelector).toArray()}return $elem.filter(submittableSelector).toArray()}).filter('[name!=\"\"]:enabled:not(:submit, :button, :image, :reset, :file):matches([checked], :not(:checkbox, :radio))').map((_,elem)=>{var _a;const $elem=this._make(elem);const name=$elem.attr(\"name\");const value=(_a=$elem.val())!==null&&_a!==void 0?_a:\"\";if(Array.isArray(value)){return value.map(val=>({name,value:val.replace(rCRLF,\"\\r\\n\")}))}return{name,value:value.replace(rCRLF,\"\\r\\n\")}}).toArray()}__name(serializeArray,\"serializeArray\");\n})()\n","warnings":[],"map":{"version":3,"mappings":";+HACA,OAAO,eAAe,QAAS,aAAc,CAAE,MAAO,IAAK,CAAC,EAC5D,QAAQ,UAAY,UACpB,QAAQ,eAAiB,eACzB,MAAM,aAAe,QAAQ,YAAY,EAKzC,MAAM,oBAAsB,+BAC5B,MAAM,IAAM,OACZ,MAAM,MAAQ,SAed,SAAS,WAAY,CAEjB,MAAM,IAAM,KAAK,eAAe,EAEhC,MAAM,OAAS,IAAI,IAAK,MAAS,GAAG,mBAAmB,KAAK,IAAI,CAAC,IAAI,mBAAmB,KAAK,KAAK,CAAC,EAAE,EAErG,OAAO,OAAO,KAAK,GAAG,EAAE,QAAQ,IAAK,GAAG,CAC5C,CAPS,8BAsBT,SAAS,gBAAiB,CAEtB,OAAO,KAAK,IAAI,CAAC,EAAG,OAAS,CACzB,MAAM,MAAQ,KAAK,MAAM,IAAI,EAC7B,IAAK,EAAG,aAAa,OAAO,IAAI,GAAK,KAAK,OAAS,OAAQ,CACvD,OAAO,MAAM,KAAK,mBAAmB,EAAE,QAAQ,CACnD,CACA,OAAO,MAAM,OAAO,mBAAmB,EAAE,QAAQ,CACrD,CAAC,EACI,OAEL,6GAIkD,EAC7C,IAAI,CAAC,EAAG,OAAS,CAClB,IAAI,GACJ,MAAM,MAAQ,KAAK,MAAM,IAAI,EAC7B,MAAM,KAAO,MAAM,KAAK,MAAM,EAE9B,MAAM,OAAS,GAAK,MAAM,IAAI,KAAO,MAAQ,KAAO,OAAS,GAAK,GAElE,GAAI,MAAM,QAAQ,KAAK,EAAG,CACtB,OAAO,MAAM,IAAK,MAKjB,CAAE,KAAM,MAAO,IAAI,QAAQ,MAAO,MAAM,CAAE,EAAE,CACjD,CAEA,MAAO,CAAE,KAAM,MAAO,MAAM,QAAQ,MAAO,MAAM,CAAE,CACvD,CAAC,EACI,QAAQ,CACjB,CAnCS","names":[],"sources":["/home/creditga/CofiCarte/node_modules/.pnpm/cheerio@1.0.0/node_modules/cheerio/dist/commonjs/api/forms.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.serialize = serialize;\nexports.serializeArray = serializeArray;\nconst domhandler_1 = require(\"domhandler\");\n/*\n * https://github.com/jquery/jquery/blob/2.1.3/src/manipulation/var/rcheckableType.js\n * https://github.com/jquery/jquery/blob/2.1.3/src/serialize.js\n */\nconst submittableSelector = 'input,select,textarea,keygen';\nconst r20 = /%20/g;\nconst rCRLF = /\\r?\\n/g;\n/**\n * Encode a set of form elements as a string for submission.\n *\n * @category Forms\n * @example\n *\n * ```js\n * $('<form><input name=\"foo\" value=\"bar\" /></form>').serialize();\n * //=> 'foo=bar'\n * ```\n *\n * @returns The serialized form.\n * @see {@link https://api.jquery.com/serialize/}\n */\nfunction serialize() {\n    // Convert form elements into name/value objects\n    const arr = this.serializeArray();\n    // Serialize each element into a key/value string\n    const retArr = arr.map((data) => `${encodeURIComponent(data.name)}=${encodeURIComponent(data.value)}`);\n    // Return the resulting serialization\n    return retArr.join('&').replace(r20, '+');\n}\n/**\n * Encode a set of form elements as an array of names and values.\n *\n * @category Forms\n * @example\n *\n * ```js\n * $('<form><input name=\"foo\" value=\"bar\" /></form>').serializeArray();\n * //=> [ { name: 'foo', value: 'bar' } ]\n * ```\n *\n * @returns The serialized form.\n * @see {@link https://api.jquery.com/serializeArray/}\n */\nfunction serializeArray() {\n    // Resolve all form elements from either forms or collections of form elements\n    return this.map((_, elem) => {\n        const $elem = this._make(elem);\n        if ((0, domhandler_1.isTag)(elem) && elem.name === 'form') {\n            return $elem.find(submittableSelector).toArray();\n        }\n        return $elem.filter(submittableSelector).toArray();\n    })\n        .filter(\n    // Verify elements have a name (`attr.name`) and are not disabled (`:enabled`)\n    '[name!=\"\"]:enabled' +\n        // And cannot be clicked (`[type=submit]`) or are used in `x-www-form-urlencoded` (`[type=file]`)\n        ':not(:submit, :button, :image, :reset, :file)' +\n        // And are either checked/don't have a checkable state\n        ':matches([checked], :not(:checkbox, :radio))')\n        .map((_, elem) => {\n        var _a;\n        const $elem = this._make(elem);\n        const name = $elem.attr('name'); // We have filtered for elements with a name before.\n        // If there is no value set (e.g. `undefined`, `null`), then default value to empty\n        const value = (_a = $elem.val()) !== null && _a !== void 0 ? _a : '';\n        // If we have an array of values (e.g. `<select multiple>`), return an array of key/value pairs\n        if (Array.isArray(value)) {\n            return value.map((val) => \n            /*\n             * We trim replace any line endings (e.g. `\\r` or `\\r\\n` with `\\r\\n`) to guarantee consistency across platforms\n             * These can occur inside of `<textarea>'s`\n             */\n            ({ name, value: val.replace(rCRLF, '\\r\\n') }));\n        }\n        // Otherwise (e.g. `<input type=\"text\">`, return only one key/value pair\n        return { name, value: value.replace(rCRLF, '\\r\\n') };\n    })\n        .toArray();\n}\n//# sourceMappingURL=forms.js.map"]}}