{"code":"(()=>{\n\"use strict\";var __defProp=Object.defineProperty;var __name=(target,value)=>__defProp(target,\"name\",{value,configurable:true});const{kConstruct}=require(\"./symbols\");const{Cache}=require(\"./cache\");const{webidl}=require(\"../fetch/webidl\");const{kEnumerableProperty}=require(\"../../core/util\");class CacheStorage{static{__name(this,\"CacheStorage\")}#caches=new Map;constructor(){if(arguments[0]!==kConstruct){webidl.illegalConstructor()}webidl.util.markAsUncloneable(this)}async match(request,options={}){webidl.brandCheck(this,CacheStorage);webidl.argumentLengthCheck(arguments,1,\"CacheStorage.match\");request=webidl.converters.RequestInfo(request);options=webidl.converters.MultiCacheQueryOptions(options);if(options.cacheName!=null){if(this.#caches.has(options.cacheName)){const cacheList=this.#caches.get(options.cacheName);const cache=new Cache(kConstruct,cacheList);return await cache.match(request,options)}}else{for(const cacheList of this.#caches.values()){const cache=new Cache(kConstruct,cacheList);const response=await cache.match(request,options);if(response!==void 0){return response}}}}async has(cacheName){webidl.brandCheck(this,CacheStorage);const prefix=\"CacheStorage.has\";webidl.argumentLengthCheck(arguments,1,prefix);cacheName=webidl.converters.DOMString(cacheName,prefix,\"cacheName\");return this.#caches.has(cacheName)}async open(cacheName){webidl.brandCheck(this,CacheStorage);const prefix=\"CacheStorage.open\";webidl.argumentLengthCheck(arguments,1,prefix);cacheName=webidl.converters.DOMString(cacheName,prefix,\"cacheName\");if(this.#caches.has(cacheName)){const cache2=this.#caches.get(cacheName);return new Cache(kConstruct,cache2)}const cache=[];this.#caches.set(cacheName,cache);return new Cache(kConstruct,cache)}async delete(cacheName){webidl.brandCheck(this,CacheStorage);const prefix=\"CacheStorage.delete\";webidl.argumentLengthCheck(arguments,1,prefix);cacheName=webidl.converters.DOMString(cacheName,prefix,\"cacheName\");return this.#caches.delete(cacheName)}async keys(){webidl.brandCheck(this,CacheStorage);const keys=this.#caches.keys();return[...keys]}}Object.defineProperties(CacheStorage.prototype,{[Symbol.toStringTag]:{value:\"CacheStorage\",configurable:true},match:kEnumerableProperty,has:kEnumerableProperty,open:kEnumerableProperty,delete:kEnumerableProperty,keys:kEnumerableProperty});module.exports={CacheStorage};\n})()\n","warnings":[],"map":{"version":3,"mappings":";+HAEA,KAAM,CAAE,UAAW,EAAI,QAAQ,WAAW,EAC1C,KAAM,CAAE,KAAM,EAAI,QAAQ,SAAS,EACnC,KAAM,CAAE,MAAO,EAAI,QAAQ,iBAAiB,EAC5C,KAAM,CAAE,mBAAoB,EAAI,QAAQ,iBAAiB,EAEzD,MAAM,YAAa,CAPnB,MAOmB,6BAKjB,QAAU,IAAI,IAEd,aAAe,CACb,GAAI,UAAU,CAAC,IAAM,WAAY,CAC/B,OAAO,mBAAmB,CAC5B,CAEA,OAAO,KAAK,kBAAkB,IAAI,CACpC,CAEA,MAAM,MAAO,QAAS,QAAU,CAAC,EAAG,CAClC,OAAO,WAAW,KAAM,YAAY,EACpC,OAAO,oBAAoB,UAAW,EAAG,oBAAoB,EAE7D,QAAU,OAAO,WAAW,YAAY,OAAO,EAC/C,QAAU,OAAO,WAAW,uBAAuB,OAAO,EAG1D,GAAI,QAAQ,WAAa,KAAM,CAE7B,GAAI,KAAK,QAAQ,IAAI,QAAQ,SAAS,EAAG,CAEvC,MAAM,UAAY,KAAK,QAAQ,IAAI,QAAQ,SAAS,EACpD,MAAM,MAAQ,IAAI,MAAM,WAAY,SAAS,EAE7C,OAAO,MAAM,MAAM,MAAM,QAAS,OAAO,CAC3C,CACF,KAAO,CAEL,UAAW,aAAa,KAAK,QAAQ,OAAO,EAAG,CAC7C,MAAM,MAAQ,IAAI,MAAM,WAAY,SAAS,EAG7C,MAAM,SAAW,MAAM,MAAM,MAAM,QAAS,OAAO,EAEnD,GAAI,WAAa,OAAW,CAC1B,OAAO,QACT,CACF,CACF,CACF,CAOA,MAAM,IAAK,UAAW,CACpB,OAAO,WAAW,KAAM,YAAY,EAEpC,MAAM,OAAS,mBACf,OAAO,oBAAoB,UAAW,EAAG,MAAM,EAE/C,UAAY,OAAO,WAAW,UAAU,UAAW,OAAQ,WAAW,EAItE,OAAO,KAAK,QAAQ,IAAI,SAAS,CACnC,CAOA,MAAM,KAAM,UAAW,CACrB,OAAO,WAAW,KAAM,YAAY,EAEpC,MAAM,OAAS,oBACf,OAAO,oBAAoB,UAAW,EAAG,MAAM,EAE/C,UAAY,OAAO,WAAW,UAAU,UAAW,OAAQ,WAAW,EAGtE,GAAI,KAAK,QAAQ,IAAI,SAAS,EAAG,CAI/B,MAAMA,OAAQ,KAAK,QAAQ,IAAI,SAAS,EAGxC,OAAO,IAAI,MAAM,WAAYA,MAAK,CACpC,CAGA,MAAM,MAAQ,CAAC,EAGf,KAAK,QAAQ,IAAI,UAAW,KAAK,EAGjC,OAAO,IAAI,MAAM,WAAY,KAAK,CACpC,CAOA,MAAM,OAAQ,UAAW,CACvB,OAAO,WAAW,KAAM,YAAY,EAEpC,MAAM,OAAS,sBACf,OAAO,oBAAoB,UAAW,EAAG,MAAM,EAE/C,UAAY,OAAO,WAAW,UAAU,UAAW,OAAQ,WAAW,EAEtE,OAAO,KAAK,QAAQ,OAAO,SAAS,CACtC,CAMA,MAAM,MAAQ,CACZ,OAAO,WAAW,KAAM,YAAY,EAGpC,MAAM,KAAO,KAAK,QAAQ,KAAK,EAG/B,MAAO,CAAC,GAAG,IAAI,CACjB,CACF,CAEA,OAAO,iBAAiB,aAAa,UAAW,CAC9C,CAAC,OAAO,WAAW,EAAG,CACpB,MAAO,eACP,aAAc,IAChB,EACA,MAAO,oBACP,IAAK,oBACL,KAAM,oBACN,OAAQ,oBACR,KAAM,mBACR,CAAC,EAED,OAAO,QAAU,CACf,YACF","names":["cache"],"sources":["/home/creditga/CofiCarte/node_modules/.pnpm/undici@6.21.0/node_modules/undici/lib/web/cache/cachestorage.js"],"sourcesContent":["'use strict'\n\nconst { kConstruct } = require('./symbols')\nconst { Cache } = require('./cache')\nconst { webidl } = require('../fetch/webidl')\nconst { kEnumerableProperty } = require('../../core/util')\n\nclass CacheStorage {\n  /**\n   * @see https://w3c.github.io/ServiceWorker/#dfn-relevant-name-to-cache-map\n   * @type {Map<string, import('./cache').requestResponseList}\n   */\n  #caches = new Map()\n\n  constructor () {\n    if (arguments[0] !== kConstruct) {\n      webidl.illegalConstructor()\n    }\n\n    webidl.util.markAsUncloneable(this)\n  }\n\n  async match (request, options = {}) {\n    webidl.brandCheck(this, CacheStorage)\n    webidl.argumentLengthCheck(arguments, 1, 'CacheStorage.match')\n\n    request = webidl.converters.RequestInfo(request)\n    options = webidl.converters.MultiCacheQueryOptions(options)\n\n    // 1.\n    if (options.cacheName != null) {\n      // 1.1.1.1\n      if (this.#caches.has(options.cacheName)) {\n        // 1.1.1.1.1\n        const cacheList = this.#caches.get(options.cacheName)\n        const cache = new Cache(kConstruct, cacheList)\n\n        return await cache.match(request, options)\n      }\n    } else { // 2.\n      // 2.2\n      for (const cacheList of this.#caches.values()) {\n        const cache = new Cache(kConstruct, cacheList)\n\n        // 2.2.1.2\n        const response = await cache.match(request, options)\n\n        if (response !== undefined) {\n          return response\n        }\n      }\n    }\n  }\n\n  /**\n   * @see https://w3c.github.io/ServiceWorker/#cache-storage-has\n   * @param {string} cacheName\n   * @returns {Promise<boolean>}\n   */\n  async has (cacheName) {\n    webidl.brandCheck(this, CacheStorage)\n\n    const prefix = 'CacheStorage.has'\n    webidl.argumentLengthCheck(arguments, 1, prefix)\n\n    cacheName = webidl.converters.DOMString(cacheName, prefix, 'cacheName')\n\n    // 2.1.1\n    // 2.2\n    return this.#caches.has(cacheName)\n  }\n\n  /**\n   * @see https://w3c.github.io/ServiceWorker/#dom-cachestorage-open\n   * @param {string} cacheName\n   * @returns {Promise<Cache>}\n   */\n  async open (cacheName) {\n    webidl.brandCheck(this, CacheStorage)\n\n    const prefix = 'CacheStorage.open'\n    webidl.argumentLengthCheck(arguments, 1, prefix)\n\n    cacheName = webidl.converters.DOMString(cacheName, prefix, 'cacheName')\n\n    // 2.1\n    if (this.#caches.has(cacheName)) {\n      // await caches.open('v1') !== await caches.open('v1')\n\n      // 2.1.1\n      const cache = this.#caches.get(cacheName)\n\n      // 2.1.1.1\n      return new Cache(kConstruct, cache)\n    }\n\n    // 2.2\n    const cache = []\n\n    // 2.3\n    this.#caches.set(cacheName, cache)\n\n    // 2.4\n    return new Cache(kConstruct, cache)\n  }\n\n  /**\n   * @see https://w3c.github.io/ServiceWorker/#cache-storage-delete\n   * @param {string} cacheName\n   * @returns {Promise<boolean>}\n   */\n  async delete (cacheName) {\n    webidl.brandCheck(this, CacheStorage)\n\n    const prefix = 'CacheStorage.delete'\n    webidl.argumentLengthCheck(arguments, 1, prefix)\n\n    cacheName = webidl.converters.DOMString(cacheName, prefix, 'cacheName')\n\n    return this.#caches.delete(cacheName)\n  }\n\n  /**\n   * @see https://w3c.github.io/ServiceWorker/#cache-storage-keys\n   * @returns {Promise<string[]>}\n   */\n  async keys () {\n    webidl.brandCheck(this, CacheStorage)\n\n    // 2.1\n    const keys = this.#caches.keys()\n\n    // 2.2\n    return [...keys]\n  }\n}\n\nObject.defineProperties(CacheStorage.prototype, {\n  [Symbol.toStringTag]: {\n    value: 'CacheStorage',\n    configurable: true\n  },\n  match: kEnumerableProperty,\n  has: kEnumerableProperty,\n  open: kEnumerableProperty,\n  delete: kEnumerableProperty,\n  keys: kEnumerableProperty\n})\n\nmodule.exports = {\n  CacheStorage\n}\n"]}}