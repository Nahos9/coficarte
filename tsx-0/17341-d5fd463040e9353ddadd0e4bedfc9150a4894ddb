{"code":"(()=>{\n\"use strict\";var __defProp=Object.defineProperty;var __name=(target,value)=>__defProp(target,\"name\",{value,configurable:true});const{isBlobLike,iteratorMixin}=require(\"./util\");const{kState}=require(\"./symbols\");const{kEnumerableProperty}=require(\"../../core/util\");const{FileLike,isFileLike}=require(\"./file\");const{webidl}=require(\"./webidl\");const{File:NativeFile}=require(\"node:buffer\");const nodeUtil=require(\"node:util\");const File=globalThis.File??NativeFile;class FormData{static{__name(this,\"FormData\")}constructor(form){webidl.util.markAsUncloneable(this);if(form!==void 0){throw webidl.errors.conversionFailed({prefix:\"FormData constructor\",argument:\"Argument 1\",types:[\"undefined\"]})}this[kState]=[]}append(name,value,filename=void 0){webidl.brandCheck(this,FormData);const prefix=\"FormData.append\";webidl.argumentLengthCheck(arguments,2,prefix);if(arguments.length===3&&!isBlobLike(value)){throw new TypeError(\"Failed to execute 'append' on 'FormData': parameter 2 is not of type 'Blob'\")}name=webidl.converters.USVString(name,prefix,\"name\");value=isBlobLike(value)?webidl.converters.Blob(value,prefix,\"value\",{strict:false}):webidl.converters.USVString(value,prefix,\"value\");filename=arguments.length===3?webidl.converters.USVString(filename,prefix,\"filename\"):void 0;const entry=makeEntry(name,value,filename);this[kState].push(entry)}delete(name){webidl.brandCheck(this,FormData);const prefix=\"FormData.delete\";webidl.argumentLengthCheck(arguments,1,prefix);name=webidl.converters.USVString(name,prefix,\"name\");this[kState]=this[kState].filter(entry=>entry.name!==name)}get(name){webidl.brandCheck(this,FormData);const prefix=\"FormData.get\";webidl.argumentLengthCheck(arguments,1,prefix);name=webidl.converters.USVString(name,prefix,\"name\");const idx=this[kState].findIndex(entry=>entry.name===name);if(idx===-1){return null}return this[kState][idx].value}getAll(name){webidl.brandCheck(this,FormData);const prefix=\"FormData.getAll\";webidl.argumentLengthCheck(arguments,1,prefix);name=webidl.converters.USVString(name,prefix,\"name\");return this[kState].filter(entry=>entry.name===name).map(entry=>entry.value)}has(name){webidl.brandCheck(this,FormData);const prefix=\"FormData.has\";webidl.argumentLengthCheck(arguments,1,prefix);name=webidl.converters.USVString(name,prefix,\"name\");return this[kState].findIndex(entry=>entry.name===name)!==-1}set(name,value,filename=void 0){webidl.brandCheck(this,FormData);const prefix=\"FormData.set\";webidl.argumentLengthCheck(arguments,2,prefix);if(arguments.length===3&&!isBlobLike(value)){throw new TypeError(\"Failed to execute 'set' on 'FormData': parameter 2 is not of type 'Blob'\")}name=webidl.converters.USVString(name,prefix,\"name\");value=isBlobLike(value)?webidl.converters.Blob(value,prefix,\"name\",{strict:false}):webidl.converters.USVString(value,prefix,\"name\");filename=arguments.length===3?webidl.converters.USVString(filename,prefix,\"name\"):void 0;const entry=makeEntry(name,value,filename);const idx=this[kState].findIndex(entry2=>entry2.name===name);if(idx!==-1){this[kState]=[...this[kState].slice(0,idx),entry,...this[kState].slice(idx+1).filter(entry2=>entry2.name!==name)]}else{this[kState].push(entry)}}[nodeUtil.inspect.custom](depth,options){const state=this[kState].reduce((a,b)=>{if(a[b.name]){if(Array.isArray(a[b.name])){a[b.name].push(b.value)}else{a[b.name]=[a[b.name],b.value]}}else{a[b.name]=b.value}return a},{__proto__:null});options.depth??=depth;options.colors??=true;const output=nodeUtil.formatWithOptions(options,state);return`FormData ${output.slice(output.indexOf(\"]\")+2)}`}}iteratorMixin(\"FormData\",FormData,kState,\"name\",\"value\");Object.defineProperties(FormData.prototype,{append:kEnumerableProperty,delete:kEnumerableProperty,get:kEnumerableProperty,getAll:kEnumerableProperty,has:kEnumerableProperty,set:kEnumerableProperty,[Symbol.toStringTag]:{value:\"FormData\",configurable:true}});function makeEntry(name,value,filename){if(typeof value===\"string\"){}else{if(!isFileLike(value)){value=value instanceof Blob?new File([value],\"blob\",{type:value.type}):new FileLike(value,\"blob\",{type:value.type})}if(filename!==void 0){const options={type:value.type,lastModified:value.lastModified};value=value instanceof NativeFile?new File([value],filename,options):new FileLike(value,filename,options)}}return{name,value}}__name(makeEntry,\"makeEntry\");module.exports={FormData,makeEntry};\n})()\n","warnings":[],"map":{"version":3,"mappings":"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","names":["entry"],"sources":["/home/creditga/CofiCarte/node_modules/.pnpm/undici@6.21.0/node_modules/undici/lib/web/fetch/formdata.js"],"sourcesContent":["'use strict'\n\nconst { isBlobLike, iteratorMixin } = require('./util')\nconst { kState } = require('./symbols')\nconst { kEnumerableProperty } = require('../../core/util')\nconst { FileLike, isFileLike } = require('./file')\nconst { webidl } = require('./webidl')\nconst { File: NativeFile } = require('node:buffer')\nconst nodeUtil = require('node:util')\n\n/** @type {globalThis['File']} */\nconst File = globalThis.File ?? NativeFile\n\n// https://xhr.spec.whatwg.org/#formdata\nclass FormData {\n  constructor (form) {\n    webidl.util.markAsUncloneable(this)\n\n    if (form !== undefined) {\n      throw webidl.errors.conversionFailed({\n        prefix: 'FormData constructor',\n        argument: 'Argument 1',\n        types: ['undefined']\n      })\n    }\n\n    this[kState] = []\n  }\n\n  append (name, value, filename = undefined) {\n    webidl.brandCheck(this, FormData)\n\n    const prefix = 'FormData.append'\n    webidl.argumentLengthCheck(arguments, 2, prefix)\n\n    if (arguments.length === 3 && !isBlobLike(value)) {\n      throw new TypeError(\n        \"Failed to execute 'append' on 'FormData': parameter 2 is not of type 'Blob'\"\n      )\n    }\n\n    // 1. Let value be value if given; otherwise blobValue.\n\n    name = webidl.converters.USVString(name, prefix, 'name')\n    value = isBlobLike(value)\n      ? webidl.converters.Blob(value, prefix, 'value', { strict: false })\n      : webidl.converters.USVString(value, prefix, 'value')\n    filename = arguments.length === 3\n      ? webidl.converters.USVString(filename, prefix, 'filename')\n      : undefined\n\n    // 2. Let entry be the result of creating an entry with\n    // name, value, and filename if given.\n    const entry = makeEntry(name, value, filename)\n\n    // 3. Append entry to this’s entry list.\n    this[kState].push(entry)\n  }\n\n  delete (name) {\n    webidl.brandCheck(this, FormData)\n\n    const prefix = 'FormData.delete'\n    webidl.argumentLengthCheck(arguments, 1, prefix)\n\n    name = webidl.converters.USVString(name, prefix, 'name')\n\n    // The delete(name) method steps are to remove all entries whose name\n    // is name from this’s entry list.\n    this[kState] = this[kState].filter(entry => entry.name !== name)\n  }\n\n  get (name) {\n    webidl.brandCheck(this, FormData)\n\n    const prefix = 'FormData.get'\n    webidl.argumentLengthCheck(arguments, 1, prefix)\n\n    name = webidl.converters.USVString(name, prefix, 'name')\n\n    // 1. If there is no entry whose name is name in this’s entry list,\n    // then return null.\n    const idx = this[kState].findIndex((entry) => entry.name === name)\n    if (idx === -1) {\n      return null\n    }\n\n    // 2. Return the value of the first entry whose name is name from\n    // this’s entry list.\n    return this[kState][idx].value\n  }\n\n  getAll (name) {\n    webidl.brandCheck(this, FormData)\n\n    const prefix = 'FormData.getAll'\n    webidl.argumentLengthCheck(arguments, 1, prefix)\n\n    name = webidl.converters.USVString(name, prefix, 'name')\n\n    // 1. If there is no entry whose name is name in this’s entry list,\n    // then return the empty list.\n    // 2. Return the values of all entries whose name is name, in order,\n    // from this’s entry list.\n    return this[kState]\n      .filter((entry) => entry.name === name)\n      .map((entry) => entry.value)\n  }\n\n  has (name) {\n    webidl.brandCheck(this, FormData)\n\n    const prefix = 'FormData.has'\n    webidl.argumentLengthCheck(arguments, 1, prefix)\n\n    name = webidl.converters.USVString(name, prefix, 'name')\n\n    // The has(name) method steps are to return true if there is an entry\n    // whose name is name in this’s entry list; otherwise false.\n    return this[kState].findIndex((entry) => entry.name === name) !== -1\n  }\n\n  set (name, value, filename = undefined) {\n    webidl.brandCheck(this, FormData)\n\n    const prefix = 'FormData.set'\n    webidl.argumentLengthCheck(arguments, 2, prefix)\n\n    if (arguments.length === 3 && !isBlobLike(value)) {\n      throw new TypeError(\n        \"Failed to execute 'set' on 'FormData': parameter 2 is not of type 'Blob'\"\n      )\n    }\n\n    // The set(name, value) and set(name, blobValue, filename) method steps\n    // are:\n\n    // 1. Let value be value if given; otherwise blobValue.\n\n    name = webidl.converters.USVString(name, prefix, 'name')\n    value = isBlobLike(value)\n      ? webidl.converters.Blob(value, prefix, 'name', { strict: false })\n      : webidl.converters.USVString(value, prefix, 'name')\n    filename = arguments.length === 3\n      ? webidl.converters.USVString(filename, prefix, 'name')\n      : undefined\n\n    // 2. Let entry be the result of creating an entry with name, value, and\n    // filename if given.\n    const entry = makeEntry(name, value, filename)\n\n    // 3. If there are entries in this’s entry list whose name is name, then\n    // replace the first such entry with entry and remove the others.\n    const idx = this[kState].findIndex((entry) => entry.name === name)\n    if (idx !== -1) {\n      this[kState] = [\n        ...this[kState].slice(0, idx),\n        entry,\n        ...this[kState].slice(idx + 1).filter((entry) => entry.name !== name)\n      ]\n    } else {\n      // 4. Otherwise, append entry to this’s entry list.\n      this[kState].push(entry)\n    }\n  }\n\n  [nodeUtil.inspect.custom] (depth, options) {\n    const state = this[kState].reduce((a, b) => {\n      if (a[b.name]) {\n        if (Array.isArray(a[b.name])) {\n          a[b.name].push(b.value)\n        } else {\n          a[b.name] = [a[b.name], b.value]\n        }\n      } else {\n        a[b.name] = b.value\n      }\n\n      return a\n    }, { __proto__: null })\n\n    options.depth ??= depth\n    options.colors ??= true\n\n    const output = nodeUtil.formatWithOptions(options, state)\n\n    // remove [Object null prototype]\n    return `FormData ${output.slice(output.indexOf(']') + 2)}`\n  }\n}\n\niteratorMixin('FormData', FormData, kState, 'name', 'value')\n\nObject.defineProperties(FormData.prototype, {\n  append: kEnumerableProperty,\n  delete: kEnumerableProperty,\n  get: kEnumerableProperty,\n  getAll: kEnumerableProperty,\n  has: kEnumerableProperty,\n  set: kEnumerableProperty,\n  [Symbol.toStringTag]: {\n    value: 'FormData',\n    configurable: true\n  }\n})\n\n/**\n * @see https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#create-an-entry\n * @param {string} name\n * @param {string|Blob} value\n * @param {?string} filename\n * @returns\n */\nfunction makeEntry (name, value, filename) {\n  // 1. Set name to the result of converting name into a scalar value string.\n  // Note: This operation was done by the webidl converter USVString.\n\n  // 2. If value is a string, then set value to the result of converting\n  //    value into a scalar value string.\n  if (typeof value === 'string') {\n    // Note: This operation was done by the webidl converter USVString.\n  } else {\n    // 3. Otherwise:\n\n    // 1. If value is not a File object, then set value to a new File object,\n    //    representing the same bytes, whose name attribute value is \"blob\"\n    if (!isFileLike(value)) {\n      value = value instanceof Blob\n        ? new File([value], 'blob', { type: value.type })\n        : new FileLike(value, 'blob', { type: value.type })\n    }\n\n    // 2. If filename is given, then set value to a new File object,\n    //    representing the same bytes, whose name attribute is filename.\n    if (filename !== undefined) {\n      /** @type {FilePropertyBag} */\n      const options = {\n        type: value.type,\n        lastModified: value.lastModified\n      }\n\n      value = value instanceof NativeFile\n        ? new File([value], filename, options)\n        : new FileLike(value, filename, options)\n    }\n  }\n\n  // 4. Return an entry whose name is name and whose value is value.\n  return { name, value }\n}\n\nmodule.exports = { FormData, makeEntry }\n"]}}