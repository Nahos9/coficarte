{"code":"(()=>{\n\"use strict\";var __defProp=Object.defineProperty;var __name=(target,value)=>__defProp(target,\"name\",{value,configurable:true});const{kConnected,kSize}=require(\"../../core/symbols\");class CompatWeakRef{static{__name(this,\"CompatWeakRef\")}constructor(value){this.value=value}deref(){return this.value[kConnected]===0&&this.value[kSize]===0?void 0:this.value}}class CompatFinalizer{static{__name(this,\"CompatFinalizer\")}constructor(finalizer){this.finalizer=finalizer}register(dispatcher,key){if(dispatcher.on){dispatcher.on(\"disconnect\",()=>{if(dispatcher[kConnected]===0&&dispatcher[kSize]===0){this.finalizer(key)}})}}unregister(key){}}module.exports=function(){if(process.env.NODE_V8_COVERAGE&&process.version.startsWith(\"v18\")){process._rawDebug(\"Using compatibility WeakRef and FinalizationRegistry\");return{WeakRef:CompatWeakRef,FinalizationRegistry:CompatFinalizer}}return{WeakRef,FinalizationRegistry}};\n})()\n","warnings":[],"map":{"version":3,"mappings":";+HAEA,KAAM,CAAE,WAAY,KAAM,EAAI,QAAQ,oBAAoB,EAE1D,MAAM,aAAc,CAJpB,MAIoB,8BAClB,YAAa,MAAO,CAClB,KAAK,MAAQ,KACf,CAEA,OAAS,CACP,OAAO,KAAK,MAAM,UAAU,IAAM,GAAK,KAAK,MAAM,KAAK,IAAM,EACzD,OACA,KAAK,KACX,CACF,CAEA,MAAM,eAAgB,CAhBtB,MAgBsB,gCACpB,YAAa,UAAW,CACtB,KAAK,UAAY,SACnB,CAEA,SAAU,WAAY,IAAK,CACzB,GAAI,WAAW,GAAI,CACjB,WAAW,GAAG,aAAc,IAAM,CAChC,GAAI,WAAW,UAAU,IAAM,GAAK,WAAW,KAAK,IAAM,EAAG,CAC3D,KAAK,UAAU,GAAG,CACpB,CACF,CAAC,CACH,CACF,CAEA,WAAY,IAAK,CAAC,CACpB,CAEA,OAAO,QAAU,UAAY,CAG3B,GAAI,QAAQ,IAAI,kBAAoB,QAAQ,QAAQ,WAAW,KAAK,EAAG,CACrE,QAAQ,UAAU,sDAAsD,EACxE,MAAO,CACL,QAAS,cACT,qBAAsB,eACxB,CACF,CACA,MAAO,CAAE,QAAS,oBAAqB,CACzC","names":[],"sources":["/home/creditga/CofiCarte/node_modules/.pnpm/undici@6.21.0/node_modules/undici/lib/web/fetch/dispatcher-weakref.js"],"sourcesContent":["'use strict'\n\nconst { kConnected, kSize } = require('../../core/symbols')\n\nclass CompatWeakRef {\n  constructor (value) {\n    this.value = value\n  }\n\n  deref () {\n    return this.value[kConnected] === 0 && this.value[kSize] === 0\n      ? undefined\n      : this.value\n  }\n}\n\nclass CompatFinalizer {\n  constructor (finalizer) {\n    this.finalizer = finalizer\n  }\n\n  register (dispatcher, key) {\n    if (dispatcher.on) {\n      dispatcher.on('disconnect', () => {\n        if (dispatcher[kConnected] === 0 && dispatcher[kSize] === 0) {\n          this.finalizer(key)\n        }\n      })\n    }\n  }\n\n  unregister (key) {}\n}\n\nmodule.exports = function () {\n  // FIXME: remove workaround when the Node bug is backported to v18\n  // https://github.com/nodejs/node/issues/49344#issuecomment-1741776308\n  if (process.env.NODE_V8_COVERAGE && process.version.startsWith('v18')) {\n    process._rawDebug('Using compatibility WeakRef and FinalizationRegistry')\n    return {\n      WeakRef: CompatWeakRef,\n      FinalizationRegistry: CompatFinalizer\n    }\n  }\n  return { WeakRef, FinalizationRegistry }\n}\n"]}}