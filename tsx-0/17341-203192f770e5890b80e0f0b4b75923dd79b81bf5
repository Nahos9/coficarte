{"code":"(()=>{\n\"use strict\";var __defProp=Object.defineProperty;var __name=(target,value)=>__defProp(target,\"name\",{value,configurable:true});const{asciiLowercase,solelyContainsHTTPTokenCodePoints,soleyContainsHTTPQuotedStringTokenCodePoints}=require(\"./utils.js\");module.exports=class MIMETypeParameters{static{__name(this,\"MIMETypeParameters\")}constructor(map){this._map=map}get size(){return this._map.size}get(name){name=asciiLowercase(String(name));return this._map.get(name)}has(name){name=asciiLowercase(String(name));return this._map.has(name)}set(name,value){name=asciiLowercase(String(name));value=String(value);if(!solelyContainsHTTPTokenCodePoints(name)){throw new Error(`Invalid MIME type parameter name \"${name}\": only HTTP token code points are valid.`)}if(!soleyContainsHTTPQuotedStringTokenCodePoints(value)){throw new Error(`Invalid MIME type parameter value \"${value}\": only HTTP quoted-string token code points are valid.`)}return this._map.set(name,value)}clear(){this._map.clear()}delete(name){name=asciiLowercase(String(name));return this._map.delete(name)}forEach(callbackFn,thisArg){this._map.forEach(callbackFn,thisArg)}keys(){return this._map.keys()}values(){return this._map.values()}entries(){return this._map.entries()}[Symbol.iterator](){return this._map[Symbol.iterator]()}};\n})()\n","warnings":[],"map":{"version":3,"mappings":";+HACA,KAAM,CACJ,eACA,kCACA,4CACF,EAAI,QAAQ,YAAY,EAExB,OAAO,QAAU,MAAM,kBAAmB,CAP1C,MAO0C,mCACxC,YAAY,IAAK,CACf,KAAK,KAAO,GACd,CAEA,IAAI,MAAO,CACT,OAAO,KAAK,KAAK,IACnB,CAEA,IAAI,KAAM,CACR,KAAO,eAAe,OAAO,IAAI,CAAC,EAClC,OAAO,KAAK,KAAK,IAAI,IAAI,CAC3B,CAEA,IAAI,KAAM,CACR,KAAO,eAAe,OAAO,IAAI,CAAC,EAClC,OAAO,KAAK,KAAK,IAAI,IAAI,CAC3B,CAEA,IAAI,KAAM,MAAO,CACf,KAAO,eAAe,OAAO,IAAI,CAAC,EAClC,MAAQ,OAAO,KAAK,EAEpB,GAAI,CAAC,kCAAkC,IAAI,EAAG,CAC5C,MAAM,IAAI,MAAM,qCAAqC,IAAI,2CAA2C,CACtG,CACA,GAAI,CAAC,6CAA6C,KAAK,EAAG,CACxD,MAAM,IAAI,MAAM,sCAAsC,KAAK,yDACnC,CAC1B,CAEA,OAAO,KAAK,KAAK,IAAI,KAAM,KAAK,CAClC,CAEA,OAAQ,CACN,KAAK,KAAK,MAAM,CAClB,CAEA,OAAO,KAAM,CACX,KAAO,eAAe,OAAO,IAAI,CAAC,EAClC,OAAO,KAAK,KAAK,OAAO,IAAI,CAC9B,CAEA,QAAQ,WAAY,QAAS,CAC3B,KAAK,KAAK,QAAQ,WAAY,OAAO,CACvC,CAEA,MAAO,CACL,OAAO,KAAK,KAAK,KAAK,CACxB,CAEA,QAAS,CACP,OAAO,KAAK,KAAK,OAAO,CAC1B,CAEA,SAAU,CACR,OAAO,KAAK,KAAK,QAAQ,CAC3B,CAEA,CAAC,OAAO,QAAQ,GAAI,CAClB,OAAO,KAAK,KAAK,OAAO,QAAQ,EAAE,CACpC,CACF","names":[],"sources":["/home/creditga/CofiCarte/node_modules/.pnpm/whatwg-mimetype@4.0.0/node_modules/whatwg-mimetype/lib/mime-type-parameters.js"],"sourcesContent":["\"use strict\";\nconst {\n  asciiLowercase,\n  solelyContainsHTTPTokenCodePoints,\n  soleyContainsHTTPQuotedStringTokenCodePoints\n} = require(\"./utils.js\");\n\nmodule.exports = class MIMETypeParameters {\n  constructor(map) {\n    this._map = map;\n  }\n\n  get size() {\n    return this._map.size;\n  }\n\n  get(name) {\n    name = asciiLowercase(String(name));\n    return this._map.get(name);\n  }\n\n  has(name) {\n    name = asciiLowercase(String(name));\n    return this._map.has(name);\n  }\n\n  set(name, value) {\n    name = asciiLowercase(String(name));\n    value = String(value);\n\n    if (!solelyContainsHTTPTokenCodePoints(name)) {\n      throw new Error(`Invalid MIME type parameter name \"${name}\": only HTTP token code points are valid.`);\n    }\n    if (!soleyContainsHTTPQuotedStringTokenCodePoints(value)) {\n      throw new Error(`Invalid MIME type parameter value \"${value}\": only HTTP quoted-string token code points are ` +\n                      `valid.`);\n    }\n\n    return this._map.set(name, value);\n  }\n\n  clear() {\n    this._map.clear();\n  }\n\n  delete(name) {\n    name = asciiLowercase(String(name));\n    return this._map.delete(name);\n  }\n\n  forEach(callbackFn, thisArg) {\n    this._map.forEach(callbackFn, thisArg);\n  }\n\n  keys() {\n    return this._map.keys();\n  }\n\n  values() {\n    return this._map.values();\n  }\n\n  entries() {\n    return this._map.entries();\n  }\n\n  [Symbol.iterator]() {\n    return this._map[Symbol.iterator]();\n  }\n};\n"]}}